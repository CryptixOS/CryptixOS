From d1db6d6064b8d129093f5a42b88084ff19b6d4d8 Mon Sep 17 00:00:00 2001
From: V1tr10l7 <vitriol1744@gmail.com>
Date: Mon, 24 Mar 2025 04:11:57 +0100
Subject: [PATCH 4/5] [cryptix]: add basic time related syscalls

---
 sysdeps/cryptix/meson.build      |  1 +
 sysdeps/cryptix/sysdeps/time.cpp | 35 ++++++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+)
 create mode 100644 sysdeps/cryptix/sysdeps/time.cpp

diff --git a/sysdeps/cryptix/meson.build b/sysdeps/cryptix/meson.build
index 127e33e7..5f26ec59 100644
--- a/sysdeps/cryptix/meson.build
+++ b/sysdeps/cryptix/meson.build
@@ -9,6 +9,7 @@ common_sources = files(
   'sysdeps/internal.cpp',
   'sysdeps/memory.cpp',
   'sysdeps/process.cpp',
+  'sysdeps/time.cpp',
   'sysdeps/vfs.cpp',
 )
 
diff --git a/sysdeps/cryptix/sysdeps/time.cpp b/sysdeps/cryptix/sysdeps/time.cpp
new file mode 100644
index 00000000..16b6c9ed
--- /dev/null
+++ b/sysdeps/cryptix/sysdeps/time.cpp
@@ -0,0 +1,35 @@
+#include <cstddef>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <cryptix/syscall.h>
+
+#include <execinfo.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/posix-sysdeps.hpp>
+
+#include <sys/mman.h>
+
+namespace mlibc
+{
+    int sys_sleep(time_t* secs, long* nanos)
+    {
+        timespec duration = {.tv_sec = *secs, .tv_nsec = nanos ? *nanos : 0};
+        timespec remaining;
+        auto     ret = Syscall(SYS_NANOSLEEP, &duration, &remaining);
+
+        if (auto e = syscall_error(ret); e) return e;
+
+        return 0;
+    }
+    int sys_clock_get(int clockid, time_t* secs, long* nanos)
+    {
+        timespec ts;
+        auto     ret = Syscall(SYS_CLOCK_GETTIME, clockid, &ts);
+        if (auto e = syscall_error(ret); e) return e;
+
+        *secs  = ts.tv_sec;
+        *nanos = ts.tv_nsec;
+        return 0;
+    }
+}; // namespace mlibc
-- 
2.48.1

