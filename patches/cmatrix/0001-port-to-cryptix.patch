From a94494f115dbd25fc22041340246ef755ac16853 Mon Sep 17 00:00:00 2001
From: V1tr10l7 <vitriol1744@gmail.com>
Date: Wed, 23 Apr 2025 19:48:08 +0200
Subject: [PATCH] port to cryptix

---
 cmatrix.c | 823 ++++++++++++++++++++++++++----------------------------
 1 file changed, 394 insertions(+), 429 deletions(-)

diff --git a/cmatrix.c b/cmatrix.c
index 90284cb..c9ef359 100644
--- a/cmatrix.c
+++ b/cmatrix.c
@@ -21,62 +21,66 @@
 
 */
 
+#include <fcntl.h>
+#include <locale.h>
+#include <signal.h>
+#include <stdarg.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <stdarg.h>
 #include <string.h>
-#include <time.h>
-#include <sys/types.h>
 #include <sys/stat.h>
-#include <fcntl.h>
+#include <sys/types.h>
 #include <termios.h>
-#include <signal.h>
-#include <locale.h>
+#include <time.h>
+
+#include <strings.h>
 
 #ifndef EXCLUDE_CONFIG_H
-#include "config.h"
+    #include "config.h"
 #endif
 
 #ifdef HAVE_NCURSES_H
-#include <ncurses.h>
+    #include <ncurses.h>
 #else
-#include <curses.h>
+    #include <curses.h>
 #endif
 
 #ifdef HAVE_SYS_IOCTL_H
-#include <sys/ioctl.h>
+    #include <sys/ioctl.h>
 #endif
 
 #ifdef HAVE_UNISTD_H
-#include <unistd.h>
+    #include <unistd.h>
 #endif
 
 #ifdef HAVE_TERMIOS_H
-#include <termios.h>
+    #include <termios.h>
 #elif defined(HAVE_TERMIO_H)
-#include <termio.h>
+    #include <termio.h>
 #endif
 
 /* Matrix typedef */
-typedef struct cmatrix {
-    int val;
+typedef struct cmatrix
+{
+    int  val;
     bool is_head;
 } cmatrix;
 
 /* Global variables */
-int console = 0;
-int xwindow = 0;
-int lock = 0;
-cmatrix **matrix = (cmatrix **) NULL;
-int *length = NULL;  /* Length of cols in each line */
-int *spaces = NULL;  /* Spaces left to fill */
-int *updates = NULL; /* What does this do again? */
-volatile sig_atomic_t signal_status = 0; /* Indicates a caught signal */
-
-int va_system(char *str, ...) {
+int                   console       = 0;
+int                   xwindow       = 0;
+int                   lock          = 0;
+cmatrix**             matrix        = (cmatrix**)NULL;
+int*                  length        = NULL; /* Length of cols in each line */
+int*                  spaces        = NULL; /* Spaces left to fill */
+int*                  updates       = NULL; /* What does this do again? */
+volatile sig_atomic_t signal_status = 0;    /* Indicates a caught signal */
+
+int                   va_system(char* str, ...)
+{
 
     va_list ap;
-    char buf[133];
+    char    buf[133];
 
     va_start(ap, str);
     vsnprintf(buf, sizeof(buf), str, ap);
@@ -85,13 +89,15 @@ int va_system(char *str, ...) {
 }
 
 /* What we do when we're all set to exit */
-void finish(void) {
+void finish(void)
+{
     curs_set(1);
     clear();
     refresh();
     resetty();
     endwin();
-    if (console) {
+    if (console)
+    {
 #ifdef HAVE_CONSOLECHARS
         va_system("consolechars -d");
 #elif defined(HAVE_SETFONT)
@@ -102,7 +108,8 @@ void finish(void) {
 }
 
 /* What we do when we're all set to exit */
-void c_die(char *msg, ...) {
+void c_die(char* msg, ...)
+{
 
     va_list ap;
 
@@ -112,7 +119,8 @@ void c_die(char *msg, ...) {
     resetty();
     endwin();
 
-    if (console) {
+    if (console)
+    {
 #ifdef HAVE_CONSOLECHARS
         va_system("consolechars -d");
 #elif defined(HAVE_SETFONT)
@@ -126,12 +134,15 @@ void c_die(char *msg, ...) {
     exit(0);
 }
 
-void usage(void) {
+void usage(void)
+{
     printf(" Usage: cmatrix -[abBcfhlsmVx] [-u delay] [-C color]\n");
     printf(" -a: Asynchronous scroll\n");
     printf(" -b: Bold characters on\n");
     printf(" -B: All bold characters (overrides -b)\n");
-    printf(" -c: Use Japanese characters as seen in the original matrix. Requires appropriate fonts\n");
+    printf(
+        " -c: Use Japanese characters as seen in the original matrix. Requires "
+        "appropriate fonts\n");
     printf(" -f: Force the linux $TERM type to be on\n");
     printf(" -l: Linux mode (uses matrix console font)\n");
     printf(" -L: Lock mode (can be closed from another terminal)\n");
@@ -147,119 +158,98 @@ void usage(void) {
     printf(" -m: lambda mode\n");
 }
 
-void version(void) {
-    printf(" CMatrix version %s (compiled %s, %s)\n",
-        VERSION, __TIME__, __DATE__);
+void version(void)
+{
+    printf(" CMatrix version %s (compiled %s, %s)\n", VERSION, __TIME__,
+           __DATE__);
     printf("Email: abishekvashok@gmail.com\n");
     printf("Web: https://github.com/abishekvashok/cmatrix\n");
 }
 
-
 /* nmalloc from nano by Big Gaute */
-void *nmalloc(size_t howmuch) {
-    void *r;
+void* nmalloc(size_t howmuch)
+{
+    void* r;
 
-    if (!(r = malloc(howmuch))) {
-        c_die("CMatrix: malloc: out of memory!");
-    }
+    if (!(r = malloc(howmuch))) { c_die("CMatrix: malloc: out of memory!"); }
 
     return r;
 }
 
 /* Initialize the global variables */
-void var_init() {
+void var_init()
+{
     int i, j;
 
-    if (matrix != NULL) {
+    if (matrix != NULL)
+    {
         free(matrix[0]);
         free(matrix);
     }
 
-    matrix = nmalloc(sizeof(cmatrix *) * (LINES + 1));
+    matrix    = nmalloc(sizeof(cmatrix*) * (LINES + 1));
     matrix[0] = nmalloc(sizeof(cmatrix) * (LINES + 1) * COLS);
-    for (i = 1; i <= LINES; i++) {
-        matrix[i] = matrix[i - 1] + COLS;
-    }
+    for (i = 1; i <= LINES; i++) { matrix[i] = matrix[i - 1] + COLS; }
 
-    if (length != NULL) {
-        free(length);
-    }
+    if (length != NULL) { free(length); }
     length = nmalloc(COLS * sizeof(int));
 
-    if (spaces != NULL) {
-        free(spaces);
-    }
-    spaces = nmalloc(COLS* sizeof(int));
+    if (spaces != NULL) { free(spaces); }
+    spaces = nmalloc(COLS * sizeof(int));
 
-    if (updates != NULL) {
-        free(updates);
-    }
+    if (updates != NULL) { free(updates); }
     updates = nmalloc(COLS * sizeof(int));
 
     /* Make the matrix */
-    for (i = 0; i <= LINES; i++) {
-        for (j = 0; j <= COLS - 1; j += 2) {
-            matrix[i][j].val = -1;
-        }
+    for (i = 0; i <= LINES; i++)
+    {
+        for (j = 0; j <= COLS - 1; j += 2) { matrix[i][j].val = -1; }
     }
 
-    for (j = 0; j <= COLS - 1; j += 2) {
+    for (j = 0; j <= COLS - 1; j += 2)
+    {
         /* Set up spaces[] array of how many spaces to skip */
-        spaces[j] = (int) rand() % LINES + 1;
+        spaces[j]        = (int)rand() % LINES + 1;
 
         /* And length of the stream */
-        length[j] = (int) rand() % (LINES - 3) + 3;
+        length[j]        = (int)rand() % (LINES - 3) + 3;
 
         /* Sentinel value for creation of new objects */
         matrix[1][j].val = ' ';
 
         /* And set updates[] array for update speed. */
-        updates[j] = (int) rand() % 3 + 1;
+        updates[j]       = (int)rand() % 3 + 1;
     }
-
 }
 
-void sighandler(int s) {
-    signal_status = s;
-}
+void sighandler(int s) { signal_status = s; }
 
-void resize_screen(void) {
-    char *tty;
-    int fd = 0;
-    int result = 0;
+void resize_screen(void)
+{
+    char*          tty;
+    int            fd     = 0;
+    int            result = 0;
     struct winsize win;
 
     tty = ttyname(0);
-    if (!tty) {
-        return;
-    }
+    if (!tty) { return; }
     fd = open(tty, O_RDWR);
-    if (fd == -1) {
-        return;
-    }
+    if (fd == -1) { return; }
     result = ioctl(fd, TIOCGWINSZ, &win);
-    if (result == -1) {
-        return;
-    }
+    if (result == -1) { return; }
 
-    COLS = win.ws_col;
+    COLS  = win.ws_col;
     LINES = win.ws_row;
 
-    if(LINES <10){
-        LINES = 10;
-    }
-    if(COLS <10){
-        COLS = 10;
-    }
+    if (LINES < 10) { LINES = 10; }
+    if (COLS < 10) { COLS = 10; }
 
 #ifdef HAVE_RESIZETERM
     resizeterm(LINES, COLS);
-#ifdef HAVE_WRESIZE
-    if (wresize(stdscr, LINES, COLS) == ERR) {
-        c_die("Cannot resize window!");
-    }
-#endif /* HAVE_WRESIZE */
-#endif /* HAVE_RESIZETERM */
+    #ifdef HAVE_WRESIZE
+    if (wresize(stdscr, LINES, COLS) == ERR) { c_die("Cannot resize window!"); }
+    #endif /* HAVE_WRESIZE */
+#endif     /* HAVE_RESIZETERM */
 
     var_init();
     /* Do these because width may have changed... */
@@ -267,112 +257,85 @@ void resize_screen(void) {
     refresh();
 }
 
-int main(int argc, char *argv[]) {
+int main(int argc, char* argv[])
+{
     int i, y, z, optchr, keypress;
-    int j = 0;
-    int count = 0;
-    int screensaver = 0;
-    int asynch = 0;
-    int bold = 0;
-    int force = 0;
+    int j            = 0;
+    int count        = 0;
+    int screensaver  = 0;
+    int asynch       = 0;
+    int bold         = 0;
+    int force        = 0;
     int firstcoldone = 0;
-    int oldstyle = 0;
-    int random = 0;
-    int update = 4;
-    int highnum = 0;
-    int mcolor = COLOR_GREEN;
-    int rainbow = 0;
-    int lambda = 0;
-    int randnum = 0;
-    int randmin = 0;
-    int pause = 0;
-    int classic = 0;
-
-    srand((unsigned) time(NULL));
+    int oldstyle     = 0;
+    int random       = 0;
+    int update       = 4;
+    int highnum      = 0;
+    int mcolor       = COLOR_GREEN;
+    int rainbow      = 0;
+    int lambda       = 0;
+    int randnum      = 0;
+    int randmin      = 0;
+    int pause        = 0;
+    int classic      = 0;
+
+    srand((unsigned)time(NULL));
     setlocale(LC_ALL, "");
 
     /* Many thanks to morph- (morph@jmss.com) for this getopt patch */
     opterr = 0;
-    while ((optchr = getopt(argc, argv, "abBcfhlLnrosmxVu:C:")) != EOF) {
-        switch (optchr) {
-        case 's':
-            screensaver = 1;
-            break;
-        case 'a':
-            asynch = 1;
-            break;
-        case 'b':
-            if (bold != 2) {
-                bold = 1;
-            }
-            break;
-        case 'B':
-            bold = 2;
-            break;
-        case 'C':
-            if (!strcasecmp(optarg, "green")) {
-                mcolor = COLOR_GREEN;
-            } else if (!strcasecmp(optarg, "red")) {
-                mcolor = COLOR_RED;
-            } else if (!strcasecmp(optarg, "blue")) {
-                mcolor = COLOR_BLUE;
-            } else if (!strcasecmp(optarg, "white")) {
-                mcolor = COLOR_WHITE;
-            } else if (!strcasecmp(optarg, "yellow")) {
-                mcolor = COLOR_YELLOW;
-            } else if (!strcasecmp(optarg, "cyan")) {
-                mcolor = COLOR_CYAN;
-            } else if (!strcasecmp(optarg, "magenta")) {
-                mcolor = COLOR_MAGENTA;
-            } else if (!strcasecmp(optarg, "black")) {
-                mcolor = COLOR_BLACK;
-            } else {
-                c_die(" Invalid color selection\n Valid "
-                       "colors are green, red, blue, "
-                       "white, yellow, cyan, magenta " "and black.\n");
-            }
-            break;
-        case 'c':
-            classic = 1;
-            break;
-        case 'f':
-            force = 1;
-            break;
-        case 'l':
-            console = 1;
-            break;
-        case 'L':
-            lock = 1;
-            break;
-        case 'n':
-            bold = -1;
-            break;
-        case 'h':
-        case '?':
-            usage();
-            exit(0);
-        case 'o':
-            oldstyle = 1;
-            break;
-        case 'u':
-            update = atoi(optarg);
-            break;
-        case 'x':
-            xwindow = 1;
-            break;
-        case 'V':
-            version();
-            exit(0);
-        case 'r':
-             rainbow = 1;
-             break;
-        case 'm':
-             lambda = 1;
-             break;
+    while ((optchr = getopt(argc, argv, "abBcfhlLnrosmxVu:C:")) != EOF)
+    {
+        switch (optchr)
+        {
+            case 's': screensaver = 1; break;
+            case 'a': asynch = 1; break;
+            case 'b':
+                if (bold != 2) { bold = 1; }
+                break;
+            case 'B': bold = 2; break;
+            case 'C':
+                if (!strcasecmp(optarg, "green")) { mcolor = COLOR_GREEN; }
+                else if (!strcasecmp(optarg, "red")) { mcolor = COLOR_RED; }
+                else if (!strcasecmp(optarg, "blue")) { mcolor = COLOR_BLUE; }
+                else if (!strcasecmp(optarg, "white")) { mcolor = COLOR_WHITE; }
+                else if (!strcasecmp(optarg, "yellow"))
+                {
+                    mcolor = COLOR_YELLOW;
+                }
+                else if (!strcasecmp(optarg, "cyan")) { mcolor = COLOR_CYAN; }
+                else if (!strcasecmp(optarg, "magenta"))
+                {
+                    mcolor = COLOR_MAGENTA;
+                }
+                else if (!strcasecmp(optarg, "black")) { mcolor = COLOR_BLACK; }
+                else
+                {
+                    c_die(
+                        " Invalid color selection\n Valid "
+                        "colors are green, red, blue, "
+                        "white, yellow, cyan, magenta "
+                        "and black.\n");
+                }
+                break;
+            case 'c': classic = 1; break;
+            case 'f': force = 1; break;
+            case 'l': console = 1; break;
+            case 'L': lock = 1; break;
+            case 'n': bold = -1; break;
+            case 'h':
+            case '?': usage(); exit(0);
+            case 'o': oldstyle = 1; break;
+            case 'u': update = atoi(optarg); break;
+            case 'x': xwindow = 1; break;
+            case 'V': version(); exit(0);
+            case 'r': rainbow = 1; break;
+            case 'm': lambda = 1; break;
         }
     }
 
-    if (force && strcmp("linux", getenv("TERM"))) {
+    if (force && strcmp("linux", getenv("TERM")))
+    {
         /* setenv is much more safe to use than putenv */
         setenv("TERM", "linux", 1);
     }
@@ -389,28 +352,36 @@ int main(int argc, char *argv[]) {
     signal(SIGWINCH, sighandler);
     signal(SIGTSTP, sighandler);
 
-if (console) {
+    if (console)
+    {
 #ifdef HAVE_CONSOLECHARS
-        if (va_system("consolechars -f matrix") != 0) {
-            c_die
-                (" There was an error running consolechars. Please make sure the\n"
-                 " consolechars program is in your $PATH.  Try running \"consolechars -f matrix\" by hand.\n");
+        if (va_system("consolechars -f matrix") != 0)
+        {
+            c_die(
+                " There was an error running consolechars. Please make sure "
+                "the\n"
+                " consolechars program is in your $PATH.  Try running "
+                "\"consolechars -f matrix\" by hand.\n");
         }
 #elif defined(HAVE_SETFONT)
-        if (va_system("setfont matrix") != 0) {
-            c_die
-                (" There was an error running setfont. Please make sure the\n"
-                 " setfont program is in your $PATH.  Try running \"setfont matrix\" by hand.\n");
+        if (va_system("setfont matrix") != 0)
+        {
+            c_die(
+                " There was an error running setfont. Please make sure the\n"
+                " setfont program is in your $PATH.  Try running \"setfont "
+                "matrix\" by hand.\n");
         }
 #else
         c_die(" Unable to use both \"setfont\" and \"consolechars\".\n");
 #endif
-}
-    if (has_colors()) {
+    }
+    if (has_colors())
+    {
         start_color();
         /* Add in colors, if available */
 #ifdef HAVE_USE_DEFAULT_COLORS
-        if (use_default_colors() != ERR) {
+        if (use_default_colors() != ERR)
+        {
             init_pair(COLOR_BLACK, -1, -1);
             init_pair(COLOR_GREEN, COLOR_GREEN, -1);
             init_pair(COLOR_WHITE, COLOR_WHITE, -1);
@@ -419,9 +390,12 @@ if (console) {
             init_pair(COLOR_MAGENTA, COLOR_MAGENTA, -1);
             init_pair(COLOR_BLUE, COLOR_BLUE, -1);
             init_pair(COLOR_YELLOW, COLOR_YELLOW, -1);
-        } else {
+        }
+        else
+        {
 #else
-        { /* Hack to deal the after effects of else in HAVE_USE_DEFAULT_COLOURS*/
+        { /* Hack to deal the after effects of else in
+             HAVE_USE_DEFAULT_COLOURS*/
 #endif
             init_pair(COLOR_BLACK, COLOR_BLACK, COLOR_BLACK);
             init_pair(COLOR_GREEN, COLOR_GREEN, COLOR_BLACK);
@@ -435,14 +409,20 @@ if (console) {
     }
 
     /* Set up values for random number generation */
-    if(classic) {
-        /* Japanese character unicode range [they are seen in the original cmatrix] */
+    if (classic)
+    {
+        /* Japanese character unicode range [they are seen in the original
+         * cmatrix] */
         randmin = 12288;
         highnum = 12351;
-    } else if (console || xwindow) {
+    }
+    else if (console || xwindow)
+    {
         randmin = 166;
         highnum = 217;
-    } else {
+    }
+    else
+    {
         randmin = 33;
         highnum = 123;
     }
@@ -450,35 +430,37 @@ if (console) {
 
     var_init();
 
-    while (1) {
+    while (1)
+    {
         /* Check for signals */
-        if (signal_status == SIGINT || signal_status == SIGQUIT) {
-            if(lock != 1)
-                finish();
+        if (signal_status == SIGINT || signal_status == SIGQUIT)
+        {
+            if (lock != 1) finish();
             /* exits */
         }
-        if (signal_status == SIGWINCH) {
+        if (signal_status == SIGWINCH)
+        {
             resize_screen();
             signal_status = 0;
         }
 
-        if(signal_status == SIGTSTP){
-            if(lock != 1)
-                    finish();
+        if (signal_status == SIGTSTP)
+        {
+            if (lock != 1) finish();
         }
 
         count++;
-        if (count > 4) {
-            count = 1;
-        }
+        if (count > 4) { count = 1; }
 
-        if ((keypress = wgetch(stdscr)) != ERR) {
-            if (screensaver == 1) {
+        if ((keypress = wgetch(stdscr)) != ERR)
+        {
+            if (screensaver == 1)
+            {
 #ifdef USE_TIOCSTI
-                char *str = malloc(0);
+                char*  str     = malloc(0);
                 size_t str_len = 0;
                 do {
-                    str = realloc(str, str_len + 1);
+                    str            = realloc(str, str_len + 1);
                     str[str_len++] = keypress;
                 } while ((keypress = wgetch(stdscr)) != ERR);
                 size_t i;
@@ -487,167 +469,170 @@ if (console) {
                 free(str);
 #endif
                 finish();
-            } else {
-                switch (keypress) {
-                case 'q':
-                    if(lock != 1)
-                        finish();
-                    break;
-                case 'a':
-                    asynch = 1 - asynch;
-                    break;
-                case 'b':
-                    bold = 1;
-                    break;
-                case 'B':
-                    bold = 2;
-                    break;
-                case 'L':
-                    lock = 1;
-                    break;
-                case 'n':
-                    bold = 0;
-                    break;
-                case '0': /* Fall through */
-                case '1': /* Fall through */
-                case '2': /* Fall through */
-                case '3': /* Fall through */
-                case '4': /* Fall through */
-                case '5': /* Fall through */
-                case '6': /* Fall through */
-                case '7': /* Fall through */
-                case '8': /* Fall through */
-                case '9':
-                    update = keypress - 48;
-                    break;
-                case '!':
-                    mcolor = COLOR_RED;
-                    rainbow = 0;
-                    break;
-                case '@':
-                    mcolor = COLOR_GREEN;
-                    rainbow = 0;
-                    break;
-                case '#':
-                    mcolor = COLOR_YELLOW;
-                    rainbow = 0;
-                    break;
-                case '$':
-                    mcolor = COLOR_BLUE;
-                    rainbow = 0;
-                    break;
-                case '%':
-                    mcolor = COLOR_MAGENTA;
-                    rainbow = 0;
-                    break;
-                case 'r':
-                     rainbow = 1;
-                     break;
-                case 'm':
-                     lambda = !lambda;
-                     break;
-                case '^':
-                    mcolor = COLOR_CYAN;
-                    rainbow = 0;
-                    break;
-                case '&':
-                    mcolor = COLOR_WHITE;
-                    rainbow = 0;
-                    break;
-                case 'p':
-                case 'P':
-                    pause = (pause == 0)?1:0;
-                    break;
-
+            }
+            else
+            {
+                switch (keypress)
+                {
+                    case 'q':
+                        if (lock != 1) finish();
+                        break;
+                    case 'a': asynch = 1 - asynch; break;
+                    case 'b': bold = 1; break;
+                    case 'B': bold = 2; break;
+                    case 'L': lock = 1; break;
+                    case 'n': bold = 0; break;
+                    case '0': /* Fall through */
+                    case '1': /* Fall through */
+                    case '2': /* Fall through */
+                    case '3': /* Fall through */
+                    case '4': /* Fall through */
+                    case '5': /* Fall through */
+                    case '6': /* Fall through */
+                    case '7': /* Fall through */
+                    case '8': /* Fall through */
+                    case '9': update = keypress - 48; break;
+                    case '!':
+                        mcolor  = COLOR_RED;
+                        rainbow = 0;
+                        break;
+                    case '@':
+                        mcolor  = COLOR_GREEN;
+                        rainbow = 0;
+                        break;
+                    case '#':
+                        mcolor  = COLOR_YELLOW;
+                        rainbow = 0;
+                        break;
+                    case '$':
+                        mcolor  = COLOR_BLUE;
+                        rainbow = 0;
+                        break;
+                    case '%':
+                        mcolor  = COLOR_MAGENTA;
+                        rainbow = 0;
+                        break;
+                    case 'r': rainbow = 1; break;
+                    case 'm': lambda = !lambda; break;
+                    case '^':
+                        mcolor  = COLOR_CYAN;
+                        rainbow = 0;
+                        break;
+                    case '&':
+                        mcolor  = COLOR_WHITE;
+                        rainbow = 0;
+                        break;
+                    case 'p':
+                    case 'P': pause = (pause == 0) ? 1 : 0; break;
                 }
             }
         }
-        for (j = 0; j <= COLS - 1; j += 2) {
-            if ((count > updates[j] || asynch == 0) && pause == 0) {
+        for (j = 0; j <= COLS - 1; j += 2)
+        {
+            if ((count > updates[j] || asynch == 0) && pause == 0)
+            {
 
                 /* I dont like old-style scrolling, yuck */
-                if (oldstyle) {
-                    for (i = LINES - 1; i >= 1; i--) {
+                if (oldstyle)
+                {
+                    for (i = LINES - 1; i >= 1; i--)
+                    {
                         matrix[i][j].val = matrix[i - 1][j].val;
                     }
-                    random = (int) rand() % (randnum + 8) + randmin;
+                    random = (int)rand() % (randnum + 8) + randmin;
 
-                    if (matrix[1][j].val == 0) {
-                        matrix[0][j].val = 1;
-                    } else if (matrix[1][j].val == ' '
-                             || matrix[1][j].val == -1) {
-                        if (spaces[j] > 0) {
+                    if (matrix[1][j].val == 0) { matrix[0][j].val = 1; }
+                    else if (matrix[1][j].val == ' ' || matrix[1][j].val == -1)
+                    {
+                        if (spaces[j] > 0)
+                        {
                             matrix[0][j].val = ' ';
                             spaces[j]--;
-                        } else {
+                        }
+                        else
+                        {
 
-                            /* Random number to determine whether head of next collumn
-                               of chars has a white 'head' on it. */
+                            /* Random number to determine whether head of next
+                               collumn of chars has a white 'head' on it. */
 
-                            if (((int) rand() % 3) == 1) {
+                            if (((int)rand() % 3) == 1)
+                            {
                                 matrix[0][j].val = 0;
-                            } else {
-                                matrix[0][j].val = (int) rand() % randnum + randmin;
                             }
-                            spaces[j] = (int) rand() % LINES + 1;
+                            else
+                            {
+                                matrix[0][j].val
+                                    = (int)rand() % randnum + randmin;
+                            }
+                            spaces[j] = (int)rand() % LINES + 1;
                         }
-                    } else if (random > highnum && matrix[1][j].val != 1) {
+                    }
+                    else if (random > highnum && matrix[1][j].val != 1)
+                    {
                         matrix[0][j].val = ' ';
-                    } else {
-                        matrix[0][j].val = (int) rand() % randnum + randmin;
                     }
-
-                } else { /* New style scrolling (default) */
+                    else { matrix[0][j].val = (int)rand() % randnum + randmin; }
+                }
+                else
+                { /* New style scrolling (default) */
                     if (matrix[0][j].val == -1 && matrix[1][j].val == ' '
-                        && spaces[j] > 0) {
+                        && spaces[j] > 0)
+                    {
                         matrix[0][j].val = -1;
                         spaces[j]--;
-                    } else if (matrix[0][j].val == -1
-                        && matrix[1][j].val == ' ') {
-                        length[j] = (int) rand() % (LINES - 3) + 3;
-                        matrix[0][j].val = (int) rand() % randnum + randmin;
+                    }
+                    else if (matrix[0][j].val == -1 && matrix[1][j].val == ' ')
+                    {
+                        length[j]        = (int)rand() % (LINES - 3) + 3;
+                        matrix[0][j].val = (int)rand() % randnum + randmin;
 
-                        spaces[j] = (int) rand() % LINES + 1;
+                        spaces[j]        = (int)rand() % LINES + 1;
                     }
-                    i = 0;
-                    y = 0;
+                    i            = 0;
+                    y            = 0;
                     firstcoldone = 0;
-                    while (i <= LINES) {
+                    while (i <= LINES)
+                    {
 
                         /* Skip over spaces */
-                        while (i <= LINES && (matrix[i][j].val == ' ' ||
-                               matrix[i][j].val == -1)) {
+                        while (i <= LINES
+                               && (matrix[i][j].val == ' '
+                                   || matrix[i][j].val == -1))
+                        {
                             i++;
                         }
 
-                        if (i > LINES) {
-                            break;
-                        }
+                        if (i > LINES) { break; }
 
                         /* Go to the head of this collumn */
                         z = i;
                         y = 0;
-                        while (i <= LINES && (matrix[i][j].val != ' ' &&
-                               matrix[i][j].val != -1)) {
+                        while (i <= LINES
+                               && (matrix[i][j].val != ' '
+                                   && matrix[i][j].val != -1))
+                        {
                             matrix[i][j].is_head = false;
                             i++;
                             y++;
                         }
 
-                        if (i > LINES) {
+                        if (i > LINES)
+                        {
                             matrix[z][j].val = ' ';
                             continue;
                         }
 
-                        matrix[i][j].val = (int) rand() % randnum + randmin;
+                        matrix[i][j].val     = (int)rand() % randnum + randmin;
                         matrix[i][j].is_head = true;
 
-                        /* If we're at the top of the collumn and it's reached its
-                           full length (about to start moving down), we do this
-                           to get it moving.  This is also how we keep segments not
-                           already growing from growing accidentally =>
+                        /* If we're at the top of the collumn and it's reached
+                           its full length (about to start moving down), we do
+                           this to get it moving.  This is also how we keep
+                           segments not already growing from growing
+                           accidentally =>
                          */
-                        if (y > length[j] || firstcoldone) {
+                        if (y > length[j] || firstcoldone)
+                        {
                             matrix[z][j].val = ' ';
                             matrix[0][j].val = -1;
                         }
@@ -657,133 +642,113 @@ if (console) {
                 }
             }
             /* A simple hack */
-            if (!oldstyle) {
+            if (!oldstyle)
+            {
                 y = 1;
                 z = LINES;
-            } else {
+            }
+            else
+            {
                 y = 0;
                 z = LINES - 1;
             }
-            for (i = y; i <= z; i++) {
+            for (i = y; i <= z; i++)
+            {
                 move(i - y, j);
 
-                if (matrix[i][j].is_head && !rainbow) {
-                    if (console || xwindow) {
-                        attron(A_ALTCHARSET);
-                    }
+                if (matrix[i][j].is_head && !rainbow)
+                {
+                    if (console || xwindow) { attron(A_ALTCHARSET); }
                     attron(COLOR_PAIR(COLOR_WHITE));
-                    if (bold) {
-                        attron(A_BOLD);
-                    }
-                    if (matrix[i][j].val == 0) {
-                        if (console || xwindow) {
-                            addch(183);
-                        } else {
-                            addch('&');
-                        }
-                    } else {
-                        addch(matrix[i][j].val);
+                    if (bold) { attron(A_BOLD); }
+                    if (matrix[i][j].val == 0)
+                    {
+                        if (console || xwindow) { addch(183); }
+                        else { addch('&'); }
                     }
+                    else { addch(matrix[i][j].val); }
 
                     attroff(COLOR_PAIR(COLOR_WHITE));
-                    if (bold) {
-                        attroff(A_BOLD);
-                    }
-                    if (console || xwindow) {
-                        attroff(A_ALTCHARSET);
-                    }
-                } else {
-                    if(rainbow) {
+                    if (bold) { attroff(A_BOLD); }
+                    if (console || xwindow) { attroff(A_ALTCHARSET); }
+                }
+                else
+                {
+                    if (rainbow)
+                    {
                         int randomColor = rand() % 6;
 
-                        switch(randomColor){
-                            case 0:
-                                mcolor = COLOR_GREEN;
-                                break;
-                            case 1:
-                                mcolor = COLOR_BLUE;
-                                break;
-                            case 2:
-                                mcolor = COLOR_BLACK;
-                                break;
-                            case 3:
-                                mcolor = COLOR_YELLOW;
-                                break;
-                            case 4:
-                                mcolor = COLOR_CYAN;
-                                break;
-                            case 5:
-                                mcolor = COLOR_MAGENTA;
-                                break;
-                       }
+                        switch (randomColor)
+                        {
+                            case 0: mcolor = COLOR_GREEN; break;
+                            case 1: mcolor = COLOR_BLUE; break;
+                            case 2: mcolor = COLOR_BLACK; break;
+                            case 3: mcolor = COLOR_YELLOW; break;
+                            case 4: mcolor = COLOR_CYAN; break;
+                            case 5: mcolor = COLOR_MAGENTA; break;
+                        }
                     }
                     attron(COLOR_PAIR(mcolor));
-                    if (matrix[i][j].val == 1) {
-                        if (bold) {
-                            attron(A_BOLD);
-                        }
+                    if (matrix[i][j].val == 1)
+                    {
+                        if (bold) { attron(A_BOLD); }
                         addch('|');
-                        if (bold) {
-                            attroff(A_BOLD);
-                        }
-                    } else {
-                        if (console || xwindow) {
-                            attron(A_ALTCHARSET);
-                        }
-                        if (bold == 2 ||
-                            (bold == 1 && matrix[i][j].val % 2 == 0)) {
+                        if (bold) { attroff(A_BOLD); }
+                    }
+                    else
+                    {
+                        if (console || xwindow) { attron(A_ALTCHARSET); }
+                        if (bold == 2
+                            || (bold == 1 && matrix[i][j].val % 2 == 0))
+                        {
                             attron(A_BOLD);
                         }
-                        if (matrix[i][j].val == -1) {
-                            addch(' ');
-                        } else if (lambda && matrix[i][j].val != ' ') {
+                        if (matrix[i][j].val == -1) { addch(' '); }
+                        else if (lambda && matrix[i][j].val != ' ')
+                        {
                             addstr("λ");
-                        } else {
-                            addch(matrix[i][j].val);
                         }
-                        if (bold == 2 ||
-                            (bold == 1 && matrix[i][j].val % 2 == 0)) {
+                        else { addch(matrix[i][j].val); }
+                        if (bold == 2
+                            || (bold == 1 && matrix[i][j].val % 2 == 0))
+                        {
                             attroff(A_BOLD);
                         }
-                        if (console || xwindow) {
-                            attroff(A_ALTCHARSET);
-                        }
+                        if (console || xwindow) { attroff(A_ALTCHARSET); }
                     }
                     attroff(COLOR_PAIR(mcolor));
                 }
             }
         }
 
-        //Check if computer is locked
-        if(lock == 1){
+        // Check if computer is locked
+        if (lock == 1)
+        {
 
-            //Add our message to the screen
-            char *msg = "Computer locked.";
-            int msg_x = LINES/2;
-            int msg_y = COLS/2 - strlen(msg)/2;
-            int i = 0;
+            // Add our message to the screen
+            char* msg   = "Computer locked.";
+            int   msg_x = LINES / 2;
+            int   msg_y = COLS / 2 - strlen(msg) / 2;
+            int   i     = 0;
 
-            //Add space before message
-            move(msg_x-1, msg_y-2);
-            for(i = 0; i < strlen(msg)+4; i++)
-                addch(' ');
+            // Add space before message
+            move(msg_x - 1, msg_y - 2);
+            for (i = 0; i < strlen(msg) + 4; i++) addch(' ');
 
-            //Write message
-            move(msg_x, msg_y-2);
+            // Write message
+            move(msg_x, msg_y - 2);
             addch(' ');
             addch(' ');
             addstr(msg);
             addch(' ');
             addch(' ');
 
-            //Add space after message
-            move(msg_x+1, msg_y-2);
-            for(i = 0; i < strlen(msg)+4; i++)
-                addch(' ');
+            // Add space after message
+            move(msg_x + 1, msg_y - 2);
+            for (i = 0; i < strlen(msg) + 4; i++) addch(' ');
         }
 
         napms(update * 10);
     }
     finish();
 }
-
-- 
2.49.0

