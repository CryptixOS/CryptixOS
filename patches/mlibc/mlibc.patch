From 8151014ac15ad103e71b943619b80e15346bf401 Mon Sep 17 00:00:00 2001
From: V1tr10l7 <vitriol1744@gmail.com>
Date: Mon, 25 Nov 2024 17:14:59 +0100
Subject: [PATCH] add cryptix target

---
 meson.build                                   |   5 +
 sysdeps/cryptix/generic/entry.cpp             |  40 ++++++
 sysdeps/cryptix/generic/sysdeps.cpp           |  41 ++++++
 sysdeps/cryptix/include/abi-bits/access.h     |   1 +
 sysdeps/cryptix/include/abi-bits/auxv.h       |   1 +
 sysdeps/cryptix/include/abi-bits/blkcnt_t.h   |   1 +
 sysdeps/cryptix/include/abi-bits/blksize_t.h  |   1 +
 sysdeps/cryptix/include/abi-bits/clockid_t.h  |   1 +
 sysdeps/cryptix/include/abi-bits/dev_t.h      |   1 +
 sysdeps/cryptix/include/abi-bits/do           |   3 +
 sysdeps/cryptix/include/abi-bits/epoll.h      |   1 +
 sysdeps/cryptix/include/abi-bits/errno.h      |   1 +
 sysdeps/cryptix/include/abi-bits/fcntl.h      |   1 +
 sysdeps/cryptix/include/abi-bits/fsblkcnt_t.h |   1 +
 sysdeps/cryptix/include/abi-bits/fsfilcnt_t.h |   1 +
 sysdeps/cryptix/include/abi-bits/gid_t.h      |   1 +
 sysdeps/cryptix/include/abi-bits/in.h         |   1 +
 sysdeps/cryptix/include/abi-bits/ino_t.h      |   1 +
 sysdeps/cryptix/include/abi-bits/inotify.h    |   1 +
 sysdeps/cryptix/include/abi-bits/ioctls.h     |   1 +
 sysdeps/cryptix/include/abi-bits/limits.h     |   1 +
 sysdeps/cryptix/include/abi-bits/mode_t.h     |   1 +
 sysdeps/cryptix/include/abi-bits/mqueue.h     |   1 +
 sysdeps/cryptix/include/abi-bits/msg.h        |   1 +
 sysdeps/cryptix/include/abi-bits/nlink_t.h    |   1 +
 sysdeps/cryptix/include/abi-bits/packet.h     |   1 +
 sysdeps/cryptix/include/abi-bits/pid_t.h      |   1 +
 sysdeps/cryptix/include/abi-bits/poll.h       |   1 +
 sysdeps/cryptix/include/abi-bits/ptrace.h     |   1 +
 sysdeps/cryptix/include/abi-bits/reboot.h     |   1 +
 sysdeps/cryptix/include/abi-bits/resource.h   |   1 +
 .../cryptix/include/abi-bits/seek-whence.h    |   1 +
 sysdeps/cryptix/include/abi-bits/shm.h        |   1 +
 sysdeps/cryptix/include/abi-bits/signal.h     |   1 +
 sysdeps/cryptix/include/abi-bits/socket.h     |   1 +
 sysdeps/cryptix/include/abi-bits/socklen_t.h  |   1 +
 sysdeps/cryptix/include/abi-bits/stat.h       |   1 +
 sysdeps/cryptix/include/abi-bits/statfs.h     |   1 +
 sysdeps/cryptix/include/abi-bits/statvfs.h    |   1 +
 sysdeps/cryptix/include/abi-bits/statx.h      |   1 +
 .../cryptix/include/abi-bits/suseconds_t.h    |   1 +
 sysdeps/cryptix/include/abi-bits/termios.h    |   1 +
 sysdeps/cryptix/include/abi-bits/time.h       |   1 +
 sysdeps/cryptix/include/abi-bits/uid_t.h      |   1 +
 sysdeps/cryptix/include/abi-bits/utsname.h    |   1 +
 sysdeps/cryptix/include/abi-bits/vm-flags.h   |   1 +
 sysdeps/cryptix/include/abi-bits/vt.h         |   1 +
 sysdeps/cryptix/include/abi-bits/wait.h       |   1 +
 sysdeps/cryptix/include/abi-bits/xattr.h      |   1 +
 sysdeps/cryptix/include/cryptix/syscall.h     | 132 ++++++++++++++++++
 sysdeps/cryptix/meson.build                   |  88 ++++++++++++
 sysdeps/cryptix/x86_64/crt0.S                 |   7 +
 sysdeps/cryptix/x86_64/crti.S                 |  10 ++
 sysdeps/cryptix/x86_64/crtn.S                 |   8 ++
 54 files changed, 379 insertions(+)
 create mode 100644 sysdeps/cryptix/generic/entry.cpp
 create mode 100644 sysdeps/cryptix/generic/sysdeps.cpp
 create mode 120000 sysdeps/cryptix/include/abi-bits/access.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/auxv.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/blkcnt_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/blksize_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/clockid_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/dev_t.h
 create mode 100755 sysdeps/cryptix/include/abi-bits/do
 create mode 120000 sysdeps/cryptix/include/abi-bits/epoll.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/errno.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/fcntl.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/fsblkcnt_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/fsfilcnt_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/gid_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/in.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/ino_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/inotify.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/ioctls.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/limits.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/mode_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/mqueue.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/msg.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/nlink_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/packet.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/pid_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/poll.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/ptrace.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/reboot.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/resource.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/seek-whence.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/shm.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/signal.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/socket.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/socklen_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/stat.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/statfs.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/statvfs.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/statx.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/suseconds_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/termios.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/time.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/uid_t.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/utsname.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/vm-flags.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/vt.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/wait.h
 create mode 120000 sysdeps/cryptix/include/abi-bits/xattr.h
 create mode 100644 sysdeps/cryptix/include/cryptix/syscall.h
 create mode 100644 sysdeps/cryptix/meson.build
 create mode 100644 sysdeps/cryptix/x86_64/crt0.S
 create mode 100644 sysdeps/cryptix/x86_64/crti.S
 create mode 100644 sysdeps/cryptix/x86_64/crtn.S

diff --git a/meson.build b/meson.build
index 471604e0..61823778 100644
--- a/meson.build
+++ b/meson.build
@@ -239,6 +239,11 @@ elif host_machine.system() == 'lyre'
 	rtld_include_dirs += include_directories('sysdeps/lyre/include')
 	libc_include_dirs += include_directories('sysdeps/lyre/include')
 	subdir('sysdeps/lyre')
+elif host_machine.system() == 'cryptix'
+	disable_linux_option = true
+	rtld_include_dirs += include_directories('sysdeps/cryptix/include')
+	libc_include_dirs += include_directories('sysdeps/cryptix/include')
+	subdir('sysdeps/cryptix')
 elif host_machine.system() == 'lemon'
 	rtld_include_dirs += include_directories('sysdeps/lemon/include')
 	libc_include_dirs += include_directories('sysdeps/lemon/include')
diff --git a/sysdeps/cryptix/generic/entry.cpp b/sysdeps/cryptix/generic/entry.cpp
new file mode 100644
index 00000000..d159b404
--- /dev/null
+++ b/sysdeps/cryptix/generic/entry.cpp
@@ -0,0 +1,40 @@
+#include <cryptix/syscall.h>
+#include <mlibc/elf/startup.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+// defined by the POSIX library
+void                          __mlibc_initLocale();
+
+extern "C" uintptr_t*         __dlapi_entrystack();
+extern "C" void               __dlapi_enter(uintptr_t*);
+
+extern char**                 environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard
+{
+    LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard()
+{
+    __mlibc_initLocale();
+
+    // Parse the exec() stack.
+    mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+    mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+                            __mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(uintptr_t* entry_stack,
+                              int        (*main_fn)(int argc, char* argv[],
+                                             char* env[]))
+{
+    __dlapi_enter(entry_stack);
+    auto result
+        = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+    exit(result);
+}
diff --git a/sysdeps/cryptix/generic/sysdeps.cpp b/sysdeps/cryptix/generic/sysdeps.cpp
new file mode 100644
index 00000000..f2e1f275
--- /dev/null
+++ b/sysdeps/cryptix/generic/sysdeps.cpp
@@ -0,0 +1,41 @@
+#include <cstddef>
+
+#define STUB(signature)                                                        \
+    signature { __asm__ volatile("int $0xf0; hlt;"); }
+#define STUB_RET(signature)                                                    \
+    signature                                                                  \
+    {                                                                          \
+        __asm__ volatile("int $0xf0; hlt;");                                   \
+        return 0;                                                              \
+    }
+
+#include "cryptix/syscall.h"
+
+#include <mlibc/debug.hpp>
+#include <mlibc/posix-sysdeps.hpp>
+
+namespace mlibc
+{
+    void sys_libc_log(const char* message)
+    {
+        auto len = strlen(message);
+        Syscall(SYS_WRITE, 2, message, len);
+    }
+
+    void sys_libc_panic() { __asm__ volatile("int $0xf0; hlt"); }
+    int  sys_tcb_set() { return 0; }
+    int  sys_anon_free(void* pointer, size_t size) { return 0; }
+    int  sys_close(int) { return 0; }
+    int  sys_anon_allocate(unsigned long, void**) { return 0; }
+    STUB_RET(int sys_open(const char*, int, mode_t, int*));
+    STUB_RET(int sys_seek(int, long, int, long*));
+    STUB_RET(int sys_vm_map(void*, unsigned long, int, int, int, long, void**));
+    STUB_RET(int sys_read(int, void*, unsigned long, long*));
+    STUB_RET(int sys_futex_wake(int*));
+    STUB_RET(int sys_futex_wait(int*, int, timespec const*));
+    STUB_RET(int sys_tcb_set(void*));
+    STUB_RET(int sys_clock_get(int, long*, long*));
+    STUB_RET(int sys_vm_unmap(void*, unsigned long));
+    STUB_RET(int sys_write(int, void const*, unsigned long, long*));
+    STUB(void sys_exit(int));
+} // namespace mlibc
diff --git a/sysdeps/cryptix/include/abi-bits/access.h b/sysdeps/cryptix/include/abi-bits/access.h
new file mode 120000
index 00000000..cb839316
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/linux/access.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/auxv.h b/sysdeps/cryptix/include/abi-bits/auxv.h
new file mode 120000
index 00000000..c43f8786
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/linux/auxv.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/blkcnt_t.h b/sysdeps/cryptix/include/abi-bits/blkcnt_t.h
new file mode 120000
index 00000000..0b0ec270
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/blksize_t.h b/sysdeps/cryptix/include/abi-bits/blksize_t.h
new file mode 120000
index 00000000..7dc8d7cf
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/clockid_t.h b/sysdeps/cryptix/include/abi-bits/clockid_t.h
new file mode 120000
index 00000000..6a42da56
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/clockid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/clockid_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/dev_t.h b/sysdeps/cryptix/include/abi-bits/dev_t.h
new file mode 120000
index 00000000..bca881e9
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/do b/sysdeps/cryptix/include/abi-bits/do
new file mode 100755
index 00000000..0c32dae4
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/do
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+ln -s ../../../../abis/linux/$1.h $1.h
diff --git a/sysdeps/cryptix/include/abi-bits/epoll.h b/sysdeps/cryptix/include/abi-bits/epoll.h
new file mode 120000
index 00000000..eb4b76dc
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/epoll.h
@@ -0,0 +1 @@
+../../../../abis/linux/epoll.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/errno.h b/sysdeps/cryptix/include/abi-bits/errno.h
new file mode 120000
index 00000000..6e507def
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/linux/errno.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/fcntl.h b/sysdeps/cryptix/include/abi-bits/fcntl.h
new file mode 120000
index 00000000..463e2c95
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/linux/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/fsblkcnt_t.h b/sysdeps/cryptix/include/abi-bits/fsblkcnt_t.h
new file mode 120000
index 00000000..898dfb2f
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsblkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/fsfilcnt_t.h b/sysdeps/cryptix/include/abi-bits/fsfilcnt_t.h
new file mode 120000
index 00000000..791755c9
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsfilcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/gid_t.h b/sysdeps/cryptix/include/abi-bits/gid_t.h
new file mode 120000
index 00000000..abce6d69
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/in.h b/sysdeps/cryptix/include/abi-bits/in.h
new file mode 120000
index 00000000..418d1d5c
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/linux/in.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/ino_t.h b/sysdeps/cryptix/include/abi-bits/ino_t.h
new file mode 120000
index 00000000..4c20aca2
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/inotify.h b/sysdeps/cryptix/include/abi-bits/inotify.h
new file mode 120000
index 00000000..b5cb2823
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/inotify.h
@@ -0,0 +1 @@
+../../../../abis/linux/inotify.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/ioctls.h b/sysdeps/cryptix/include/abi-bits/ioctls.h
new file mode 120000
index 00000000..595106b6
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/ioctls.h
@@ -0,0 +1 @@
+../../../../abis/linux/ioctls.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/limits.h b/sysdeps/cryptix/include/abi-bits/limits.h
new file mode 120000
index 00000000..6c88db2e
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/linux/limits.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/mode_t.h b/sysdeps/cryptix/include/abi-bits/mode_t.h
new file mode 120000
index 00000000..5d78fdfc
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/mqueue.h b/sysdeps/cryptix/include/abi-bits/mqueue.h
new file mode 120000
index 00000000..fa87b078
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/mqueue.h
@@ -0,0 +1 @@
+../../../../abis/linux/mqueue.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/msg.h b/sysdeps/cryptix/include/abi-bits/msg.h
new file mode 120000
index 00000000..f402b493
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/msg.h
@@ -0,0 +1 @@
+../../../../abis/linux/msg.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/nlink_t.h b/sysdeps/cryptix/include/abi-bits/nlink_t.h
new file mode 120000
index 00000000..bb3b625c
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/packet.h b/sysdeps/cryptix/include/abi-bits/packet.h
new file mode 120000
index 00000000..998ef1ab
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/packet.h
@@ -0,0 +1 @@
+../../../../abis/linux/packet.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/pid_t.h b/sysdeps/cryptix/include/abi-bits/pid_t.h
new file mode 120000
index 00000000..baa90f6a
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/poll.h b/sysdeps/cryptix/include/abi-bits/poll.h
new file mode 120000
index 00000000..8ea6a0a3
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/poll.h
@@ -0,0 +1 @@
+../../../../abis/linux/poll.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/ptrace.h b/sysdeps/cryptix/include/abi-bits/ptrace.h
new file mode 120000
index 00000000..b2517b2c
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/ptrace.h
@@ -0,0 +1 @@
+../../../../abis/linux/ptrace.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/reboot.h b/sysdeps/cryptix/include/abi-bits/reboot.h
new file mode 120000
index 00000000..77013a41
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/reboot.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/resource.h b/sysdeps/cryptix/include/abi-bits/resource.h
new file mode 120000
index 00000000..88d74025
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/linux/resource.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/seek-whence.h b/sysdeps/cryptix/include/abi-bits/seek-whence.h
new file mode 120000
index 00000000..df7bccf0
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/linux/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/shm.h b/sysdeps/cryptix/include/abi-bits/shm.h
new file mode 120000
index 00000000..067d8c4f
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/shm.h
@@ -0,0 +1 @@
+../../../../abis/linux/shm.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/signal.h b/sysdeps/cryptix/include/abi-bits/signal.h
new file mode 120000
index 00000000..4dcb0b7c
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/linux/signal.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/socket.h b/sysdeps/cryptix/include/abi-bits/socket.h
new file mode 120000
index 00000000..f1dc016e
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/linux/socket.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/socklen_t.h b/sysdeps/cryptix/include/abi-bits/socklen_t.h
new file mode 120000
index 00000000..41f3b11f
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/socklen_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/socklen_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/stat.h b/sysdeps/cryptix/include/abi-bits/stat.h
new file mode 120000
index 00000000..1f63b41f
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/linux/stat.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/statfs.h b/sysdeps/cryptix/include/abi-bits/statfs.h
new file mode 120000
index 00000000..e3d202f5
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/statfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statfs.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/statvfs.h b/sysdeps/cryptix/include/abi-bits/statvfs.h
new file mode 120000
index 00000000..1fc80c2a
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/statvfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statvfs.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/statx.h b/sysdeps/cryptix/include/abi-bits/statx.h
new file mode 120000
index 00000000..8702a1d0
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/statx.h
@@ -0,0 +1 @@
+../../../../abis/linux/statx.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/suseconds_t.h b/sysdeps/cryptix/include/abi-bits/suseconds_t.h
new file mode 120000
index 00000000..9ed65977
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/suseconds_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/suseconds_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/termios.h b/sysdeps/cryptix/include/abi-bits/termios.h
new file mode 120000
index 00000000..ee8f0b09
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/linux/termios.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/time.h b/sysdeps/cryptix/include/abi-bits/time.h
new file mode 120000
index 00000000..2a026257
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/linux/time.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/uid_t.h b/sysdeps/cryptix/include/abi-bits/uid_t.h
new file mode 120000
index 00000000..b3067778
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/utsname.h b/sysdeps/cryptix/include/abi-bits/utsname.h
new file mode 120000
index 00000000..b2857547
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/linux/utsname.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/vm-flags.h b/sysdeps/cryptix/include/abi-bits/vm-flags.h
new file mode 120000
index 00000000..bbe258cf
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/linux/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/vt.h b/sysdeps/cryptix/include/abi-bits/vt.h
new file mode 120000
index 00000000..5798a4ac
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/vt.h
@@ -0,0 +1 @@
+../../../../abis/linux/vt.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/wait.h b/sysdeps/cryptix/include/abi-bits/wait.h
new file mode 120000
index 00000000..feb2840c
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/linux/wait.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/abi-bits/xattr.h b/sysdeps/cryptix/include/abi-bits/xattr.h
new file mode 120000
index 00000000..66412d70
--- /dev/null
+++ b/sysdeps/cryptix/include/abi-bits/xattr.h
@@ -0,0 +1 @@
+../../../../abis/linux/xattr.h
\ No newline at end of file
diff --git a/sysdeps/cryptix/include/cryptix/syscall.h b/sysdeps/cryptix/include/cryptix/syscall.h
new file mode 100644
index 00000000..6184058e
--- /dev/null
+++ b/sysdeps/cryptix/include/cryptix/syscall.h
@@ -0,0 +1,132 @@
+#include <cstddef>
+#include <cstdint>
+
+#define SyscallInvoker "syscall"
+
+namespace mlibc
+{
+#pragma region
+    inline constexpr size_t SYS_WRITE = 0;
+
+#pragma endregion
+
+    static inline uintptr_t SyscallAsm0(uintptr_t n)
+    {
+        uintptr_t ret;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static inline uintptr_t SyscallAsm1(uintptr_t n, uintptr_t a1)
+    {
+        uintptr_t ret;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n), "D"(a1)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static inline uintptr_t SyscallAsm2(uintptr_t n, uintptr_t a1, uintptr_t a2)
+    {
+        uintptr_t ret;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n), "D"(a1), "S"(a2)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static inline uintptr_t SyscallAsm3(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                        uintptr_t a3)
+    {
+        uintptr_t ret;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n), "D"(a1), "S"(a2), "d"(a3)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static inline uintptr_t SyscallAsm4(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                        uintptr_t a3, uintptr_t a4)
+    {
+        uintptr_t          ret;
+        register uintptr_t r10 asm("r10") = a4;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static inline uintptr_t SyscallAsm5(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                        uintptr_t a3, uintptr_t a4,
+                                        uintptr_t a5)
+    {
+        uintptr_t          ret;
+        register uintptr_t r10 asm("r10") = a4;
+        register uintptr_t r8 asm("r8")   = a5;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+    static inline uintptr_t SyscallAsm6(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                        uintptr_t a3, uintptr_t a4,
+                                        uintptr_t a5, uintptr_t a6)
+    {
+        uintptr_t          ret;
+        register uintptr_t r10 asm("r10") = a4;
+        register uintptr_t r8 asm("r8")   = a5;
+        register uintptr_t r9 asm("r9")   = a6;
+        asm volatile(SyscallInvoker
+                     : "=a"(ret)
+                     : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8),
+                       "r"(r9)
+                     : "rcx", "r11", "memory");
+        return ret;
+    }
+
+#define GetMacro(_1, _2, _3, _4, _5, _6, _7, NAME, ...) NAME
+#define InvokeSyscall(...)                                                     \
+    GetMacro(__VA_ARGS__, SyscallAsm6, SyscallAsm5, SyscallAsm4, SyscallAsm3,  \
+             SyscallAsm2, SyscallAsm1, SyscallAsm0)(__VA_ARGS__)
+
+    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                               uintptr_t a3, uintptr_t a4, uintptr_t a5,
+                               uintptr_t a6)
+    {
+        return InvokeSyscall(n, a1, a2, a3, a4, a5, a6);
+    }
+    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                               uintptr_t a3, uintptr_t a4, uintptr_t a5)
+    {
+        return InvokeSyscall(n, a1, a2, a3, a4, a5);
+    }
+    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                               uintptr_t a4)
+    {
+        return InvokeSyscall(n, a1, a2, a4);
+    }
+    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2)
+    {
+        return InvokeSyscall(n, a1, a2);
+    }
+    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1)
+    {
+        return InvokeSyscall(n, a1);
+    }
+    inline uintptr_t DoSyscall(uintptr_t n) { return InvokeSyscall(n); }
+
+    template <typename... Args>
+    inline uintptr_t Syscall(Args&&... args)
+    {
+        return DoSyscall(uintptr_t(args)...);
+    }
+} // namespace mlibc
diff --git a/sysdeps/cryptix/meson.build b/sysdeps/cryptix/meson.build
new file mode 100644
index 00000000..7027a530
--- /dev/null
+++ b/sysdeps/cryptix/meson.build
@@ -0,0 +1,88 @@
+rtld_dso_sources += files('generic/sysdeps.cpp')
+libc_sources += files('generic/entry.cpp', 'generic/sysdeps.cpp')
+
+if not no_headers
+  install_headers(
+    'include/abi-bits/auxv.h',
+    'include/abi-bits/seek-whence.h',
+    'include/abi-bits/vm-flags.h',
+    'include/abi-bits/errno.h',
+    'include/abi-bits/fcntl.h',
+    'include/abi-bits/in.h',
+    'include/abi-bits/stat.h',
+    'include/abi-bits/statx.h',
+    'include/abi-bits/signal.h',
+    'include/abi-bits/reboot.h',
+    'include/abi-bits/resource.h',
+    'include/abi-bits/socket.h',
+    'include/abi-bits/termios.h',
+    'include/abi-bits/time.h',
+    'include/abi-bits/blkcnt_t.h',
+    'include/abi-bits/blksize_t.h',
+    'include/abi-bits/dev_t.h',
+    'include/abi-bits/gid_t.h',
+    'include/abi-bits/ino_t.h',
+    'include/abi-bits/mode_t.h',
+    'include/abi-bits/nlink_t.h',
+    'include/abi-bits/pid_t.h',
+    'include/abi-bits/uid_t.h',
+    'include/abi-bits/access.h',
+    'include/abi-bits/wait.h',
+    'include/abi-bits/limits.h',
+    'include/abi-bits/utsname.h',
+    'include/abi-bits/ptrace.h',
+    'include/abi-bits/vt.h',
+    'include/abi-bits/ptrace.h',
+    'include/abi-bits/poll.h',
+    'include/abi-bits/epoll.h',
+    'include/abi-bits/packet.h',
+    'include/abi-bits/inotify.h',
+    'include/abi-bits/clockid_t.h',
+    'include/abi-bits/shm.h',
+    'include/abi-bits/mqueue.h',
+    'include/abi-bits/suseconds_t.h',
+    'include/abi-bits/fsfilcnt_t.h',
+    'include/abi-bits/fsblkcnt_t.h',
+    'include/abi-bits/socklen_t.h',
+    'include/abi-bits/statfs.h',
+    'include/abi-bits/statvfs.h',
+    'include/abi-bits/ioctls.h',
+    'include/abi-bits/xattr.h',
+    'include/abi-bits/msg.h',
+    subdir: 'abi-bits',
+    follow_symlinks: true,
+  )
+  install_headers('include/cryptix/syscall.h', subdir: 'cryptix')
+endif
+
+if not headers_only
+  crt = custom_target(
+    'crt0',
+    build_by_default: true,
+    command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+    input: host_machine.cpu_family() / 'crt0.S',
+    output: 'crt0.o',
+    install: true,
+    install_dir: get_option('libdir'),
+  )
+
+  custom_target(
+    'crti',
+    build_by_default: true,
+    command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+    input: host_machine.cpu_family() / 'crti.S',
+    output: 'crti.o',
+    install: true,
+    install_dir: get_option('libdir'),
+  )
+
+  custom_target(
+    'crtn',
+    build_by_default: true,
+    command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+    input: host_machine.cpu_family() / 'crtn.S',
+    output: 'crtn.o',
+    install: true,
+    install_dir: get_option('libdir'),
+  )
+endif
diff --git a/sysdeps/cryptix/x86_64/crt0.S b/sysdeps/cryptix/x86_64/crt0.S
new file mode 100644
index 00000000..bc06417a
--- /dev/null
+++ b/sysdeps/cryptix/x86_64/crt0.S
@@ -0,0 +1,7 @@
+.section .text
+.global _start
+_start:
+	mov %rsp, %rdi
+	mov $main, %rsi
+	call __mlibc_entry
+.section .note.GNU-stack,"",%progbitst
diff --git a/sysdeps/cryptix/x86_64/crti.S b/sysdeps/cryptix/x86_64/crti.S
new file mode 100644
index 00000000..f04679c0
--- /dev/null
+++ b/sysdeps/cryptix/x86_64/crti.S
@@ -0,0 +1,10 @@
+.section .init
+.global _init
+_init:
+	push %rax
+
+.section .fini
+.global _fini
+_fini:
+	push %rax
+.section .note.GNU-stack,"",%progbits
diff --git a/sysdeps/cryptix/x86_64/crtn.S b/sysdeps/cryptix/x86_64/crtn.S
new file mode 100644
index 00000000..1b61d5a3
--- /dev/null
+++ b/sysdeps/cryptix/x86_64/crtn.S
@@ -0,0 +1,8 @@
+.section .init
+	pop %rax
+	ret
+
+.section .fini
+	pop %rax
+	ret
+.section .note.GNU-stack,"",%progbits
-- 
2.47.0

