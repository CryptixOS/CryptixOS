From 5de8956ac6197b6ba7fd8971f8c87c5fe9b548ed Mon Sep 17 00:00:00 2001
From: V1tr10l7 <vitriol1744@gmail.com>
Date: Sun, 27 Jul 2025 21:48:46 +0200
Subject: [PATCH] [cryptix]: implement a few more syscalls

---
 meson.build                               |  2 +-
 sysdeps/cryptix/include/cryptix/syscall.h | 12 ++++
 sysdeps/cryptix/sysdeps/vfs.cpp           | 67 +++++++++++++++++++++++
 3 files changed, 80 insertions(+), 1 deletion(-)

diff --git a/meson.build b/meson.build
index e01c62b9..b034d527 100644
--- a/meson.build
+++ b/meson.build
@@ -213,7 +213,7 @@ if host_machine.system() == 'cryptix'
     libc_include_dirs += include_directories('sysdeps/cryptix/include')
 
 	#internal_conf.set10('MLIBC_MAP_DSO_SEGMENTS', true)
-	#internal_conf.set10('MLIBC_MMAP_ALLOCATE_DSO', true)
+	internal_conf.set10('MLIBC_MMAP_ALLOCATE_DSO', true)
 	#internal_conf.set10('MLIBC_MAP_FILE_WINDOWS', true)
     subdir('sysdeps/cryptix')
 elif host_machine.system() == 'linux'
diff --git a/sysdeps/cryptix/include/cryptix/syscall.h b/sysdeps/cryptix/include/cryptix/syscall.h
index 0f6e9704..8da6bb90 100644
--- a/sysdeps/cryptix/include/cryptix/syscall.h
+++ b/sysdeps/cryptix/include/cryptix/syscall.h
@@ -31,6 +31,8 @@ constexpr size_t SYS_MMAP = 9;
 constexpr size_t SYS_MPROTECT = 10;
 constexpr size_t SYS_MUNMAP = 11;
 constexpr size_t SYS_IOCTL = 16;
+constexpr size_t SYS_PREAD64 = 17;
+constexpr size_t SYS_PWRITE64 = 18;
 constexpr size_t SYS_ACCESS = 21;
 constexpr size_t SYS_PIPE = 22;
 constexpr size_t SYS_DUP = 32;
@@ -48,9 +50,17 @@ constexpr size_t SYS_CHDIR = 80;
 constexpr size_t SYS_FCHDIR = 81;
 constexpr size_t SYS_RENAME = 82;
 constexpr size_t SYS_MKDIR = 83;
+constexpr size_t SYS_RMDIR = 84;
 constexpr size_t SYS_CREAT = 85;
 constexpr size_t SYS_LINK = 86;
+constexpr size_t SYS_UNLINK = 87;
+constexpr size_t SYS_SYMLINK = 88;
 constexpr size_t SYS_READLINK = 89;
+constexpr size_t SYS_CHMOD = 90;
+constexpr size_t SYS_FCHMOD = 91;
+constexpr size_t SYS_CHOWN = 92;
+constexpr size_t SYS_FCHOWN = 93;
+constexpr size_t SYS_LCHOWN = 94;
 constexpr size_t SYS_UMASK = 95;
 constexpr size_t SYS_GETRLIMIT = 97;
 constexpr size_t SYS_GETRUSAGE = 98;
@@ -73,9 +83,11 @@ constexpr size_t SYS_CLOCK_GETTIME = 228;
 constexpr size_t SYS_PANIC = 255;
 constexpr size_t SYS_OPENAT = 257;
 constexpr size_t SYS_MKDIRAT = 258;
+constexpr size_t SYS_MKNODAT = 259;
 constexpr size_t SYS_FSTATAT = 262;
 constexpr size_t SYS_RENAMEAT = 264;
 constexpr size_t SYS_LINKAT = 265;
+constexpr size_t SYS_SYMLINKAT = 266;
 constexpr size_t SYS_READLINKAT = 267;
 constexpr size_t SYS_FCHMODAT = 268;
 constexpr size_t SYS_UTIMENSAT = 280;
diff --git a/sysdeps/cryptix/sysdeps/vfs.cpp b/sysdeps/cryptix/sysdeps/vfs.cpp
index 646902d8..3b7db2ca 100644
--- a/sysdeps/cryptix/sysdeps/vfs.cpp
+++ b/sysdeps/cryptix/sysdeps/vfs.cpp
@@ -108,6 +108,22 @@ int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
 	*result = ret;
 	return 0;
 }
+int sys_pread(int fd, void *buf, size_t n, off_t off, ssize_t *bytes_read) {
+	int ret = Syscall(SYS_PREAD64, fd, buf, n, off);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*bytes_read = ret;
+	return 0;
+}
+int sys_pwrite(int fd, const void *buf, size_t n, off_t off, ssize_t *bytes_written) {
+	int ret = Syscall(SYS_PWRITE64, fd, buf, n, off);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*bytes_written = ret;
+	return 0;
+}
 
 int sys_access(const char *path, int mode) {
 	int ret = Syscall(SYS_ACCESS, path, mode);
@@ -194,6 +210,13 @@ int sys_mkdir(const char *path, mode_t mode) {
 
 	return 0;
 }
+int sys_rmdir(const char *path) {
+	auto ret = Syscall(SYS_RMDIR, path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
 int sys_link(const char *old_path, const char *new_path) {
 	auto ret = Syscall(SYS_LINK, old_path, new_path);
 	if (auto e = syscall_error(ret); e)
@@ -201,6 +224,13 @@ int sys_link(const char *old_path, const char *new_path) {
 
 	return 0;
 }
+int sys_symlink(const char *target_path, const char *link_path) {
+	auto ret = Syscall(SYS_SYMLINK, target_path, link_path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
 int sys_readlink(const char *path, void *buffer, size_t maxSize, ssize_t *length) {
 	auto ret = Syscall(SYS_READLINK, path, buffer, maxSize);
 	if (auto e = syscall_error(ret); e)
@@ -209,6 +239,29 @@ int sys_readlink(const char *path, void *buffer, size_t maxSize, ssize_t *length
 	*length = ret;
 	return 0;
 }
+int sys_chmod(const char *pathname, mode_t mode) {
+	auto ret = Syscall(SYS_CHMOD, pathname, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_fchmod(int fd, mode_t mode) {
+	auto ret = Syscall(SYS_FCHMOD, fd, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_umask(mode_t mode, mode_t *old_mode) {
+	auto ret = Syscall(SYS_UMASK, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*old_mode = ret;
+	return 0;
+}
+
 int sys_statfs(const char *path, struct statfs *out) {
 	auto ret = Syscall(SYS_STATFS, path, out);
 	if (auto e = syscall_error(ret); e)
@@ -257,6 +310,13 @@ int sys_mkdirat(int dirfd, const char *path, mode_t mode) {
 
 	return 0;
 }
+int sys_mknodat(int dirfd, const char *path, int mode, int dev) {
+	auto ret = Syscall(SYS_MKNODAT, dirfd, path, mode, dev);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
 int sys_renameat(int olddirfd, const char *old_path, int newdirfd, const char *new_path) {
 	auto ret = Syscall(SYS_RENAMEAT, olddirfd, old_path, newdirfd, new_path);
 	if (auto e = syscall_error(ret); e)
@@ -271,6 +331,13 @@ int sys_linkat(int olddirfd, const char *old_path, int newdirfd, const char *new
 
 	return 0;
 }
+int sys_symlinkat(const char *target_path, int dirfd, const char *link_path) {
+	auto ret = Syscall(SYS_SYMLINKAT, target_path, dirfd, link_path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
 int sys_readlinkat(int dirfd, const char *path, char *buf, size_t bufsz, ssize_t *length) {
 	auto ret = Syscall(SYS_READLINKAT, dirfd, path, buf, bufsz);
 	if (auto e = syscall_error(ret); e)
-- 
2.50.1

