From 5c5e7e2620dbf88c2a5ac857168714e8468ff145 Mon Sep 17 00:00:00 2001
From: V1tr10l7 <vitriol1744@gmail.com>
Date: Mon, 23 Jun 2025 12:13:48 +0200
Subject: [PATCH] [cryptix]: implement utimensat syscall

---
 meson.build                               |   6 +-
 sysdeps/cryptix/include/cryptix/syscall.h | 302 ++++++-----
 sysdeps/cryptix/sysdeps/vfs.cpp           | 586 ++++++++++++----------
 3 files changed, 479 insertions(+), 415 deletions(-)

diff --git a/meson.build b/meson.build
index 76c5b83a..e01c62b9 100644
--- a/meson.build
+++ b/meson.build
@@ -208,9 +208,13 @@ if host_machine.system() == 'cryptix'
     glibc_option = true
     bsd_option = true
     libgcc_dependency = true
-    debug_allocator = true
+    #debug_allocator = true
     rtld_include_dirs += include_directories('sysdeps/cryptix/include')
     libc_include_dirs += include_directories('sysdeps/cryptix/include')
+
+	#internal_conf.set10('MLIBC_MAP_DSO_SEGMENTS', true)
+	#internal_conf.set10('MLIBC_MMAP_ALLOCATE_DSO', true)
+	#internal_conf.set10('MLIBC_MAP_FILE_WINDOWS', true)
     subdir('sysdeps/cryptix')
 elif host_machine.system() == 'linux'
 	provides_bits_syscall_h = true
diff --git a/sysdeps/cryptix/include/cryptix/syscall.h b/sysdeps/cryptix/include/cryptix/syscall.h
index f8eeb036..0f6e9704 100644
--- a/sysdeps/cryptix/include/cryptix/syscall.h
+++ b/sysdeps/cryptix/include/cryptix/syscall.h
@@ -3,194 +3,178 @@
 
 #define SyscallInvoker "syscall"
 
-#define STUB(signature)                                                        \
-    signature { sys_libc_log(#signature "is a stub!"); }
-#define STUB_RET(signature)                                                    \
-    signature                                                                  \
-    {                                                                          \
-        sys_libc_log(#signature " is a stub!");                                \
-        return 0;                                                              \
-    }
-
-inline int syscall_error(intptr_t ret)
-{
-    auto v = static_cast<intptr_t>(ret);
-    if (static_cast<uintptr_t>(v) > -4096ul) return -v;
-    return 0;
+#define STUB(signature)                                                                            \
+	signature { sys_libc_log(#signature "is a stub!"); }
+#define STUB_RET(signature)                                                                        \
+	signature {                                                                                    \
+		sys_libc_log(#signature " is a stub!");                                                    \
+		return 0;                                                                                  \
+	}
+
+inline int syscall_error(intptr_t ret) {
+	auto v = static_cast<intptr_t>(ret);
+	if (static_cast<uintptr_t>(v) > -4096ul)
+		return -v;
+	return 0;
 }
 
 #pragma region
-constexpr size_t SYS_READ          = 0;
-constexpr size_t SYS_WRITE         = 1;
-constexpr size_t SYS_OPEN          = 2;
-constexpr size_t SYS_CLOSE         = 3;
-constexpr size_t SYS_STAT          = 4;
-constexpr size_t SYS_FSTAT         = 5;
-constexpr size_t SYS_LSTAT         = 6;
-constexpr size_t SYS_LSEEK         = 8;
-constexpr size_t SYS_MMAP          = 9;
-constexpr size_t SYS_MPROTECT      = 10;
-constexpr size_t SYS_MUNMAP        = 11;
-constexpr size_t SYS_IOCTL         = 16;
-constexpr size_t SYS_ACCESS        = 21;
-constexpr size_t SYS_PIPE          = 22;
-constexpr size_t SYS_DUP           = 32;
-constexpr size_t SYS_DUP2          = 33;
-constexpr size_t SYS_NANOSLEEP     = 35;
-constexpr size_t SYS_GETPID        = 39;
-constexpr size_t SYS_FORK          = 57;
-constexpr size_t SYS_EXECVE        = 59;
-constexpr size_t SYS_EXIT          = 60;
-constexpr size_t SYS_WAIT4         = 61;
-constexpr size_t SYS_UNAME         = 63;
-constexpr size_t SYS_FCNTL         = 72;
-constexpr size_t SYS_GETCWD        = 79;
-constexpr size_t SYS_CHDIR         = 80;
-constexpr size_t SYS_FCHDIR        = 81;
-constexpr size_t SYS_MKDIR         = 83;
-constexpr size_t SYS_CREAT         = 85;
-constexpr size_t SYS_UMASK         = 95;
-constexpr size_t SYS_GETRLIMIT     = 97;
-constexpr size_t SYS_GETRUSAGE     = 98;
-constexpr size_t SYS_GETUID        = 102;
-constexpr size_t SYS_GETGID        = 104;
-constexpr size_t SYS_GETEUID       = 107;
-constexpr size_t SYS_GETEGID       = 108;
-constexpr size_t SYS_SETPGID       = 109;
-constexpr size_t SYS_GETPPID       = 110;
-constexpr size_t SYS_SETSID        = 112;
-constexpr size_t SYS_GETPGID       = 121;
-constexpr size_t SYS_GETSID        = 124;
-constexpr size_t SYS_ARCH_PRCTL    = 158;
-constexpr size_t SYS_MOUNT         = 165;
-constexpr size_t SYS_UMOUNT        = 166;
-constexpr size_t SYS_REBOOT        = 169;
-constexpr size_t SYS_GETDENTS64    = 217;
+constexpr size_t SYS_READ = 0;
+constexpr size_t SYS_WRITE = 1;
+constexpr size_t SYS_OPEN = 2;
+constexpr size_t SYS_CLOSE = 3;
+constexpr size_t SYS_STAT = 4;
+constexpr size_t SYS_FSTAT = 5;
+constexpr size_t SYS_LSTAT = 6;
+constexpr size_t SYS_LSEEK = 8;
+constexpr size_t SYS_MMAP = 9;
+constexpr size_t SYS_MPROTECT = 10;
+constexpr size_t SYS_MUNMAP = 11;
+constexpr size_t SYS_IOCTL = 16;
+constexpr size_t SYS_ACCESS = 21;
+constexpr size_t SYS_PIPE = 22;
+constexpr size_t SYS_DUP = 32;
+constexpr size_t SYS_DUP2 = 33;
+constexpr size_t SYS_NANOSLEEP = 35;
+constexpr size_t SYS_GETPID = 39;
+constexpr size_t SYS_FORK = 57;
+constexpr size_t SYS_EXECVE = 59;
+constexpr size_t SYS_EXIT = 60;
+constexpr size_t SYS_WAIT4 = 61;
+constexpr size_t SYS_UNAME = 63;
+constexpr size_t SYS_FCNTL = 72;
+constexpr size_t SYS_GETCWD = 79;
+constexpr size_t SYS_CHDIR = 80;
+constexpr size_t SYS_FCHDIR = 81;
+constexpr size_t SYS_RENAME = 82;
+constexpr size_t SYS_MKDIR = 83;
+constexpr size_t SYS_CREAT = 85;
+constexpr size_t SYS_LINK = 86;
+constexpr size_t SYS_READLINK = 89;
+constexpr size_t SYS_UMASK = 95;
+constexpr size_t SYS_GETRLIMIT = 97;
+constexpr size_t SYS_GETRUSAGE = 98;
+constexpr size_t SYS_GETUID = 102;
+constexpr size_t SYS_GETGID = 104;
+constexpr size_t SYS_GETEUID = 107;
+constexpr size_t SYS_GETEGID = 108;
+constexpr size_t SYS_SETPGID = 109;
+constexpr size_t SYS_GETPPID = 110;
+constexpr size_t SYS_SETSID = 112;
+constexpr size_t SYS_GETPGID = 121;
+constexpr size_t SYS_GETSID = 124;
+constexpr size_t SYS_STATFS = 137;
+constexpr size_t SYS_ARCH_PRCTL = 158;
+constexpr size_t SYS_MOUNT = 165;
+constexpr size_t SYS_UMOUNT = 166;
+constexpr size_t SYS_REBOOT = 169;
+constexpr size_t SYS_GETDENTS64 = 217;
 constexpr size_t SYS_CLOCK_GETTIME = 228;
-constexpr size_t SYS_PANIC         = 255;
-constexpr size_t SYS_OPENAT        = 257;
-constexpr size_t SYS_FSTATAT       = 262;
-constexpr size_t SYS_FCHMODAT      = 268;
+constexpr size_t SYS_PANIC = 255;
+constexpr size_t SYS_OPENAT = 257;
+constexpr size_t SYS_MKDIRAT = 258;
+constexpr size_t SYS_FSTATAT = 262;
+constexpr size_t SYS_RENAMEAT = 264;
+constexpr size_t SYS_LINKAT = 265;
+constexpr size_t SYS_READLINKAT = 267;
+constexpr size_t SYS_FCHMODAT = 268;
+constexpr size_t SYS_UTIMENSAT = 280;
 
 #pragma endregion
 
-static inline uintptr_t SyscallAsm0(uintptr_t n)
-{
+static inline uintptr_t SyscallAsm0(uintptr_t n) {
 
-    uintptr_t ret;
-    asm volatile(SyscallInvoker : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
-    return ret;
+	uintptr_t ret;
+	asm volatile(SyscallInvoker : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
+	return ret;
 }
 
-static inline uintptr_t SyscallAsm1(uintptr_t n, uintptr_t a1)
-{
-    uintptr_t ret;
-    asm volatile(SyscallInvoker
-                 : "=a"(ret)
-                 : "a"(n), "D"(a1)
-                 : "rcx", "r11", "memory");
-    return ret;
+static inline uintptr_t SyscallAsm1(uintptr_t n, uintptr_t a1) {
+	uintptr_t ret;
+	asm volatile(SyscallInvoker : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
+	return ret;
 }
 
-static inline uintptr_t SyscallAsm2(uintptr_t n, uintptr_t a1, uintptr_t a2)
-{
-    uintptr_t ret;
-    asm volatile(SyscallInvoker
-                 : "=a"(ret)
-                 : "a"(n), "D"(a1), "S"(a2)
-                 : "rcx", "r11", "memory");
-    return ret;
+static inline uintptr_t SyscallAsm2(uintptr_t n, uintptr_t a1, uintptr_t a2) {
+	uintptr_t ret;
+	asm volatile(SyscallInvoker : "=a"(ret) : "a"(n), "D"(a1), "S"(a2) : "rcx", "r11", "memory");
+	return ret;
 }
 
-static inline uintptr_t SyscallAsm3(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                    uintptr_t a3)
-{
-    uintptr_t ret;
-    asm volatile(SyscallInvoker
-                 : "=a"(ret)
-                 : "a"(n), "D"(a1), "S"(a2), "d"(a3)
-                 : "rcx", "r11", "memory");
-    return ret;
+static inline uintptr_t SyscallAsm3(uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3) {
+	uintptr_t ret;
+	asm volatile(SyscallInvoker
+	             : "=a"(ret)
+	             : "a"(n), "D"(a1), "S"(a2), "d"(a3)
+	             : "rcx", "r11", "memory");
+	return ret;
 }
 
-static inline uintptr_t SyscallAsm4(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                    uintptr_t a3, uintptr_t a4)
-{
-    uintptr_t          ret;
-    register uintptr_t r10 asm("r10") = a4;
-    asm volatile(SyscallInvoker
-                 : "=a"(ret)
-                 : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10)
-                 : "rcx", "r11", "memory");
-    return ret;
+static inline uintptr_t
+SyscallAsm4(uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4) {
+	uintptr_t ret;
+	register uintptr_t r10 asm("r10") = a4;
+	asm volatile(SyscallInvoker
+	             : "=a"(ret)
+	             : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10)
+	             : "rcx", "r11", "memory");
+	return ret;
 }
 
-static inline uintptr_t SyscallAsm5(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                    uintptr_t a3, uintptr_t a4, uintptr_t a5)
-{
-    uintptr_t          ret;
-    register uintptr_t r10 asm("r10") = a4;
-    register uintptr_t r8 asm("r8")   = a5;
-    asm volatile(SyscallInvoker
-                 : "=a"(ret)
-                 : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8)
-                 : "rcx", "r11", "memory");
-    return ret;
+static inline uintptr_t
+SyscallAsm5(uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5) {
+	uintptr_t ret;
+	register uintptr_t r10 asm("r10") = a4;
+	register uintptr_t r8 asm("r8") = a5;
+	asm volatile(SyscallInvoker
+	             : "=a"(ret)
+	             : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8)
+	             : "rcx", "r11", "memory");
+	return ret;
 }
 
-static inline uintptr_t SyscallAsm6(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                    uintptr_t a3, uintptr_t a4, uintptr_t a5,
-                                    uintptr_t a6)
-{
-    uintptr_t          ret;
-    register uintptr_t r10 asm("r10") = a4;
-    register uintptr_t r8 asm("r8")   = a5;
-    register uintptr_t r9 asm("r9")   = a6;
-    asm volatile(SyscallInvoker
-                 : "=a"(ret)
-                 : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8), "r"(r9)
-                 : "rcx", "r11", "memory");
-    return ret;
+static inline uintptr_t SyscallAsm6(
+    uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6
+) {
+	uintptr_t ret;
+	register uintptr_t r10 asm("r10") = a4;
+	register uintptr_t r8 asm("r8") = a5;
+	register uintptr_t r9 asm("r9") = a6;
+	asm volatile(SyscallInvoker
+	             : "=a"(ret)
+	             : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8), "r"(r9)
+	             : "rcx", "r11", "memory");
+	return ret;
 }
 
 #define GetMacro(_1, _2, _3, _4, _5, _6, _7, NAME, ...) NAME
-#define InvokeSyscall(...)                                                     \
-    GetMacro(__VA_ARGS__, SyscallAsm6, SyscallAsm5, SyscallAsm4, SyscallAsm3,  \
-             SyscallAsm2, SyscallAsm1, SyscallAsm0)(__VA_ARGS__)
-
-inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                           uintptr_t a3, uintptr_t a4, uintptr_t a5,
-                           uintptr_t a6)
-{
-    return InvokeSyscall(n, a1, a2, a3, a4, a5, a6);
+#define InvokeSyscall(...)                                                                                            \
+	GetMacro(__VA_ARGS__, SyscallAsm6, SyscallAsm5, SyscallAsm4, SyscallAsm3, SyscallAsm2, SyscallAsm1, SyscallAsm0)( \
+	    __VA_ARGS__                                                                                                   \
+	)
+
+inline uintptr_t DoSyscall(
+    uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5, uintptr_t a6
+) {
+	return InvokeSyscall(n, a1, a2, a3, a4, a5, a6);
 }
-inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                           uintptr_t a3, uintptr_t a4, uintptr_t a5)
-{
-    return InvokeSyscall(n, a1, a2, a3, a4, a5);
+inline uintptr_t
+DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4, uintptr_t a5) {
+	return InvokeSyscall(n, a1, a2, a3, a4, a5);
 }
-inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                           uintptr_t a3, uintptr_t a4)
-{
-    return InvokeSyscall(n, a1, a2, a3, a4);
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4) {
+	return InvokeSyscall(n, a1, a2, a3, a4);
 }
-inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                           uintptr_t a3)
-{
-    return InvokeSyscall(n, a1, a2, a3);
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2, uintptr_t a3) {
+	return InvokeSyscall(n, a1, a2, a3);
 }
-inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2)
-{
-    return InvokeSyscall(n, a1, a2);
-}
-inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1)
-{
-    return InvokeSyscall(n, a1);
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2) {
+	return InvokeSyscall(n, a1, a2);
 }
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1) { return InvokeSyscall(n, a1); }
 inline uintptr_t DoSyscall(uintptr_t n) { return InvokeSyscall(n); }
 
 template <typename... Args>
-inline uintptr_t Syscall(Args&&... args)
-{
-    return DoSyscall(uintptr_t(args)...);
+inline uintptr_t Syscall(Args &&...args) {
+	return DoSyscall(uintptr_t(args)...);
 }
diff --git a/sysdeps/cryptix/sysdeps/vfs.cpp b/sysdeps/cryptix/sysdeps/vfs.cpp
index af2df149..646902d8 100644
--- a/sysdeps/cryptix/sysdeps/vfs.cpp
+++ b/sysdeps/cryptix/sysdeps/vfs.cpp
@@ -20,263 +20,339 @@
 
 #include <cryptix/syscall.h>
 
-namespace mlibc
-{
-    int sys_sysconf(int num, long* ret)
-    {
-        switch (num)
-        {
-            case _SC_OPEN_MAX:
-            case _SC_CHILD_MAX:
-            case _SC_LINE_MAX:
-            case _SC_PHYS_PAGES: *ret = INT32_MAX; break;
-
-            default: return EINVAL;
-        }
-
-        return 0;
-    }
-
-    int sys_read(int fd, void* buffer, size_t count, ssize_t* bytesRead)
-    {
-        auto ret = Syscall(SYS_READ, fd, buffer, count);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *bytesRead = ssize_t(ret);
-        return 0;
-    }
-    int sys_write(int fd, void const* buffer, unsigned long bytes,
-                  long* bytesWritten)
-    {
-
-        auto ret = Syscall(SYS_WRITE, fd, buffer, bytes);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *bytesWritten = ret;
-        return 0;
-    }
-    int sys_open(const char* path, int flags, mode_t mode, int* fd)
-    {
-        auto ret = Syscall(SYS_OPENAT, AT_FDCWD, path, flags, mode);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *fd = ret;
-        return 0;
-    }
-    int sys_close(int fd)
-    {
-        auto ret = Syscall(SYS_CLOSE, fd);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-
-    int sys_stat(fsfd_target fsfdt, int fd, const char* path, int flags,
-                 struct stat* statbuf)
-    {
-        int ret = -1;
-        switch (fsfdt)
-        {
-            case fsfd_target::fd:
-                ret = Syscall(SYS_FSTATAT, fd, "", flags | AT_EMPTY_PATH,
-                              statbuf);
-                break;
-            case fsfd_target::path:
-                ret = Syscall(SYS_FSTATAT, AT_FDCWD, path, flags, statbuf);
-                break;
-            case fsfd_target::fd_path:
-                ret = Syscall(SYS_FSTATAT, fd, path, flags, statbuf);
-                break;
-
-            default:
-                __ensure(!"sys_stat: invalid fsfdt");
-                __builtin_unreachable();
-        }
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_seek(int fd, off_t offset, int whence, off_t* newOffset)
-    {
-        auto ret = Syscall(SYS_LSEEK, fd, offset, whence);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *newOffset = off_t(ret);
-        return 0;
-    }
-    int sys_ioctl(int fd, unsigned long request, void* arg, int* result)
-    {
-        int ret = Syscall(SYS_IOCTL, fd, request, arg);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *result = ret;
-        return 0;
-    }
-
-    int sys_access(const char* path, int mode)
-    {
-        int ret = Syscall(SYS_ACCESS, path, mode);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_pipe(int* fds, int flags)
-    {
-        int ret = Syscall(SYS_PIPE, fds);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_dup(int fd, int flags, int* newfd)
-    {
-        // TODO(v1tr10l7): implement flags;
-        (void)flags;
-        auto ret = Syscall(SYS_DUP, fd);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *newfd = ret;
-        return 0;
-    }
-    int sys_dup2(int fd, int flags, int newfd)
-    {
-        // TODO(v1tr10l7): implement flags;
-        (void)flags;
-        auto ret = Syscall(SYS_DUP2, fd, newfd);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-
-    int sys_uname(struct utsname* out)
-    {
-        auto ret = Syscall(SYS_UNAME, out);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_fcntl(int fd, int request, va_list args, int* result)
-    {
-        auto ret = Syscall(SYS_FCNTL, fd, request, args);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *result = ret;
-        return 0;
-    }
-
-    int sys_getcwd(char* buffer, size_t size)
-    {
-        auto ret = Syscall(SYS_GETCWD, buffer, size);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_chdir(const char* path)
-    {
-        auto ret = Syscall(SYS_CHDIR, path);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_fchdir(int fd)
-    {
-        auto ret = Syscall(SYS_FCHDIR, fd);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_mkdir(const char* path, mode_t mode)
-    {
-        auto ret = Syscall(SYS_MKDIR, path, mode);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-    int sys_mount(const char* source, const char* target, const char* fs_name,
-                  unsigned long flags, const void* data)
-    {
-        auto ret = Syscall(SYS_MOUNT, source, target, fs_name, flags, data);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return ret;
-    }
-
-    int sys_read_entries(int fdnum, void* buffer, size_t max_size,
-                         size_t* bytes_read)
-    {
-        auto ret = Syscall(SYS_GETDENTS64, fdnum, buffer, max_size);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *bytes_read = ret;
-        return 0;
-    }
-    int sys_openat(int dirfd, const char* path, int flags, mode_t mode, int* fd)
-    {
-        int ret = Syscall(SYS_OPENAT, dirfd, path, flags, mode);
-        if (auto e = syscall_error(ret); e) return e;
-
-        *fd = ret;
-        return 0;
-    }
-    int sys_open_dir(const char* path, int* fd)
-    {
-        return sys_openat(AT_FDCWD, path, O_DIRECTORY, 0, fd);
-    }
-
-    int sys_fchmodat(int fd, const char* pathname, mode_t mode, int flags)
-    {
-        auto ret = Syscall(SYS_FCHMODAT, fd, pathname, mode, flags);
-        if (auto e = syscall_error(ret); e) return e;
-
-        return 0;
-    }
-
-    int sys_isatty(int fd)
-    {
-        winsize ws;
-        int     ret;
-        if (!sys_ioctl(fd, TIOCGWINSZ, &ws, &ret)) return 0;
-
-        return ENOTTY;
-    }
-    int sys_ttyname(int fd, char* buf, size_t size)
-    {
-        buf[0] = 'T';
-        buf[1] = 0;
-        return 0;
-    }
+namespace mlibc {
+int sys_sysconf(int num, long *ret) {
+	switch (num) {
+		case _SC_OPEN_MAX:
+		case _SC_CHILD_MAX:
+		case _SC_LINE_MAX:
+		case _SC_PHYS_PAGES:
+			*ret = INT32_MAX;
+			break;
+
+		default:
+			return EINVAL;
+	}
+
+	return 0;
+}
+
+int sys_read(int fd, void *buffer, size_t count, ssize_t *bytesRead) {
+	auto ret = Syscall(SYS_READ, fd, buffer, count);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*bytesRead = ssize_t(ret);
+	return 0;
+}
+int sys_write(int fd, void const *buffer, unsigned long bytes, long *bytesWritten) {
+
+	auto ret = Syscall(SYS_WRITE, fd, buffer, bytes);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*bytesWritten = ret;
+	return 0;
+}
+int sys_open(const char *path, int flags, mode_t mode, int *fd) {
+	auto ret = Syscall(SYS_OPENAT, AT_FDCWD, path, flags, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*fd = ret;
+	return 0;
+}
+int sys_close(int fd) {
+	auto ret = Syscall(SYS_CLOSE, fd);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+	int ret = -1;
+	switch (fsfdt) {
+		case fsfd_target::fd:
+			ret = Syscall(SYS_FSTATAT, fd, "", flags | AT_EMPTY_PATH, statbuf);
+			break;
+		case fsfd_target::path:
+			ret = Syscall(SYS_FSTATAT, AT_FDCWD, path, flags, statbuf);
+			break;
+		case fsfd_target::fd_path:
+			ret = Syscall(SYS_FSTATAT, fd, path, flags, statbuf);
+			break;
+
+		default:
+			__ensure(!"sys_stat: invalid fsfdt");
+			__builtin_unreachable();
+	}
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_seek(int fd, off_t offset, int whence, off_t *newOffset) {
+	auto ret = Syscall(SYS_LSEEK, fd, offset, whence);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*newOffset = off_t(ret);
+	return 0;
+}
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+	int ret = Syscall(SYS_IOCTL, fd, request, arg);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*result = ret;
+	return 0;
+}
+
+int sys_access(const char *path, int mode) {
+	int ret = Syscall(SYS_ACCESS, path, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_pipe(int *fds, int flags) {
+	int ret = Syscall(SYS_PIPE, fds);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_dup(int fd, int flags, int *newfd) {
+	// TODO(v1tr10l7): implement flags;
+	(void)flags;
+	auto ret = Syscall(SYS_DUP, fd);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*newfd = ret;
+	return 0;
+}
+int sys_dup2(int fd, int flags, int newfd) {
+	// TODO(v1tr10l7): implement flags;
+	(void)flags;
+	auto ret = Syscall(SYS_DUP2, fd, newfd);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+
+int sys_uname(struct utsname *out) {
+	auto ret = Syscall(SYS_UNAME, out);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_fcntl(int fd, int request, va_list args, int *result) {
+	auto ret = Syscall(SYS_FCNTL, fd, request, args);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*result = ret;
+	return 0;
+}
+
+int sys_getcwd(char *buffer, size_t size) {
+	auto ret = Syscall(SYS_GETCWD, buffer, size);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_chdir(const char *path) {
+	auto ret = Syscall(SYS_CHDIR, path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_fchdir(int fd) {
+	auto ret = Syscall(SYS_FCHDIR, fd);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_rename(const char *old_path, const char *new_path) {
+	auto ret = Syscall(SYS_RENAME, old_path, new_path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_mkdir(const char *path, mode_t mode) {
+	auto ret = Syscall(SYS_MKDIR, path, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_link(const char *old_path, const char *new_path) {
+	auto ret = Syscall(SYS_LINK, old_path, new_path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_readlink(const char *path, void *buffer, size_t maxSize, ssize_t *length) {
+	auto ret = Syscall(SYS_READLINK, path, buffer, maxSize);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*length = ret;
+	return 0;
+}
+int sys_statfs(const char *path, struct statfs *out) {
+	auto ret = Syscall(SYS_STATFS, path, out);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+
+int sys_mount(
+    const char *source,
+    const char *target,
+    const char *fs_name,
+    unsigned long flags,
+    const void *data
+) {
+	auto ret = Syscall(SYS_MOUNT, source, target, fs_name, flags, data);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return ret;
+}
+
+int sys_read_entries(int fdnum, void *buffer, size_t max_size, size_t *bytes_read) {
+	auto ret = Syscall(SYS_GETDENTS64, fdnum, buffer, max_size);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*bytes_read = ret;
+	return 0;
+}
+int sys_openat(int dirfd, const char *path, int flags, mode_t mode, int *fd) {
+	auto ret = Syscall(SYS_OPENAT, dirfd, path, flags, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*fd = ret;
+	return 0;
+}
+int sys_open_dir(const char *path, int *fd) {
+	return sys_openat(AT_FDCWD, path, O_DIRECTORY, 0, fd);
+}
+int sys_mkdirat(int dirfd, const char *path, mode_t mode) {
+	auto ret = Syscall(SYS_MKDIRAT, dirfd, path, mode);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_renameat(int olddirfd, const char *old_path, int newdirfd, const char *new_path) {
+	auto ret = Syscall(SYS_RENAMEAT, olddirfd, old_path, newdirfd, new_path);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_linkat(int olddirfd, const char *old_path, int newdirfd, const char *new_path, int flags) {
+	auto ret = Syscall(SYS_LINKAT, olddirfd, old_path, newdirfd, new_path, flags);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+int sys_readlinkat(int dirfd, const char *path, char *buf, size_t bufsz, ssize_t *length) {
+	auto ret = Syscall(SYS_READLINKAT, dirfd, path, buf, bufsz);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	*length = ret;
+	return 0;
+}
+int sys_fchmodat(int fd, const char *pathname, mode_t mode, int flags) {
+	auto ret = Syscall(SYS_FCHMODAT, fd, pathname, mode, flags);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
+
+int sys_isatty(int fd) {
+	winsize ws;
+	int ret;
+	if (!sys_ioctl(fd, TIOCGWINSZ, &ws, &ret))
+		return 0;
+
+	return ENOTTY;
+}
+int sys_ttyname(int fd, char *buf, size_t size) {
+	buf[0] = 'T';
+	buf[1] = 0;
+	return 0;
+}
 
 #ifndef TCGETS
-    constexpr size_t TCGETS  = 0x5401;
-    constexpr size_t TCSETS  = 0x5402;
-    constexpr size_t TCSETSW = 0x5403;
-    constexpr size_t TCSETSF = 0x5404;
+constexpr size_t TCGETS = 0x5401;
+constexpr size_t TCSETS = 0x5402;
+constexpr size_t TCSETSW = 0x5403;
+constexpr size_t TCSETSF = 0x5404;
 #endif
 
-    int sys_tcgetattr(int fd, struct termios* attr)
-    {
-        int ret;
-        if (int r = sys_ioctl(fd, TCGETS, attr, &ret) != 0) return r;
-
-        return 0;
-    }
-
-    int sys_tcsetattr(int fd, int optional_action, const struct termios* attr)
-    {
-        int ret;
-        switch (optional_action)
-        {
-            case TCSANOW: optional_action = TCSETS; break;
-            case TCSADRAIN: optional_action = TCSETSW; break;
-            case TCSAFLUSH: optional_action = TCSETSF; break;
-            default: __ensure(!"Unsupported tcsetattr");
-        }
-
-        if (int r = sys_ioctl(fd, optional_action, (void*)attr, &ret) != 0)
-            return r;
-
-        return 0;
-    }
-    STUB_RET(int sys_pselect(int nfds, fd_set* readfds, fd_set* writefds,
-                             fd_set* exceptfds, const struct timespec* timeout,
-                             const sigset_t* sigmask, int* num_events));
+int sys_tcgetattr(int fd, struct termios *attr) {
+	int ret;
+	if (int r = sys_ioctl(fd, TCGETS, attr, &ret) != 0)
+		return r;
+
+	return 0;
+}
+
+int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+	int ret;
+	switch (optional_action) {
+		case TCSANOW:
+			optional_action = TCSETS;
+			break;
+		case TCSADRAIN:
+			optional_action = TCSETSW;
+			break;
+		case TCSAFLUSH:
+			optional_action = TCSETSF;
+			break;
+		default:
+			__ensure(!"Unsupported tcsetattr");
+	}
+
+	if (int r = sys_ioctl(fd, optional_action, (void *)attr, &ret) != 0)
+		return r;
+
+	return 0;
+}
+STUB_RET(
+    int sys_pselect(
+        int nfds,
+        fd_set *readfds,
+        fd_set *writefds,
+        fd_set *exceptfds,
+        const struct timespec *timeout,
+        const sigset_t *sigmask,
+        int *num_events
+    )
+);
+int sys_utimensat(int dirfd, const char *pathname, const struct timespec times[2], int flags) {
+	auto ret = Syscall(SYS_UTIMENSAT, dirfd, pathname, times, flags);
+	if (auto e = syscall_error(ret); e)
+		return e;
+
+	return 0;
+}
 } // namespace mlibc
-- 
2.49.0

