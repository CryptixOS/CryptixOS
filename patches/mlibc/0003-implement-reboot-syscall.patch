From 5828b9238154c7280d5322865b973b7d1f817f16 Mon Sep 17 00:00:00 2001
From: V1tr10l7 <vitriol1744@gmail.com>
Date: Thu, 20 Feb 2025 01:13:03 +0100
Subject: [PATCH] cryptix: implement reboot syscall

---
 sysdeps/cryptix/generic/reboot.cpp         |  38 +++
 sysdeps/cryptix/include/cryptix/reboot.hpp |  15 +
 sysdeps/cryptix/include/cryptix/syscall.h  | 319 ++++++++++-----------
 sysdeps/cryptix/meson.build                |   1 +
 4 files changed, 210 insertions(+), 163 deletions(-)
 create mode 100644 sysdeps/cryptix/generic/reboot.cpp
 create mode 100644 sysdeps/cryptix/include/cryptix/reboot.hpp

diff --git a/sysdeps/cryptix/generic/reboot.cpp b/sysdeps/cryptix/generic/reboot.cpp
new file mode 100644
index 00000000..c4ceb444
--- /dev/null
+++ b/sysdeps/cryptix/generic/reboot.cpp
@@ -0,0 +1,38 @@
+#include <bits/ensure.h>
+#include <cryptix/reboot.hpp>
+#include <cryptix/syscall.h>
+#include <errno.h>
+#include <sys/reboot.h>
+
+using namespace cryptix;
+
+RebootCmd cryptix_reboot_cmd(unsigned int what)
+{
+    switch (what)
+    {
+        case 0x01234567: return RebootCmd::eRestart;
+        case 0xCDEF0123: return RebootCmd::eHalt;
+        case 0x4321FEDC: return RebootCmd::ePowerOff;
+        case 0xA1B2C3D4: return RebootCmd::eRestart2;
+        case 0xD000FCE2: return RebootCmd::eSuspend;
+        case 0x45584543: return RebootCmd::eKexec;
+
+        default: break;
+    }
+
+    return RebootCmd::eUndefined;
+}
+
+int reboot(int what)
+{
+    auto cmd = cryptix_reboot_cmd(what);
+
+    auto ret = Syscall(SYS_REBOOT, cmd);
+    if (auto e = syscall_error(ret); e)
+    {
+        errno = e;
+        return -1;
+    }
+
+    return 0;
+}
diff --git a/sysdeps/cryptix/include/cryptix/reboot.hpp b/sysdeps/cryptix/include/cryptix/reboot.hpp
new file mode 100644
index 00000000..6eb97384
--- /dev/null
+++ b/sysdeps/cryptix/include/cryptix/reboot.hpp
@@ -0,0 +1,15 @@
+#pragma once
+
+namespace cryptix
+{
+    enum class RebootCmd
+    {
+        eRestart   = 0,
+        eHalt      = 1,
+        ePowerOff  = 2,
+        eRestart2  = 3,
+        eSuspend   = 4,
+        eKexec     = 5,
+        eUndefined = -1,
+    };
+};
diff --git a/sysdeps/cryptix/include/cryptix/syscall.h b/sysdeps/cryptix/include/cryptix/syscall.h
index ca1bbd58..c8f02d69 100644
--- a/sysdeps/cryptix/include/cryptix/syscall.h
+++ b/sysdeps/cryptix/include/cryptix/syscall.h
@@ -12,181 +12,174 @@
         return 0;                                                              \
     }
 
-namespace mlibc
+inline int syscall_error(intptr_t ret)
 {
-    inline int syscall_error(intptr_t ret)
-    {
-        auto v = static_cast<intptr_t>(ret);
-        if (static_cast<uintptr_t>(v) > -4096ul) return -v;
-        return 0;
-    }
+    auto v = static_cast<intptr_t>(ret);
+    if (static_cast<uintptr_t>(v) > -4096ul) return -v;
+    return 0;
+}
 
 #pragma region
-    constexpr size_t SYS_READ       = 0;
-    constexpr size_t SYS_WRITE      = 1;
-    constexpr size_t SYS_OPEN       = 2;
-    constexpr size_t SYS_CLOSE      = 3;
-    constexpr size_t SYS_STAT       = 4;
-    constexpr size_t SYS_FSTAT      = 5;
-    constexpr size_t SYS_LSTAT      = 6;
-    constexpr size_t SYS_LSEEK      = 8;
-    constexpr size_t SYS_MMAP       = 9;
-    constexpr size_t SYS_IOCTL      = 16;
-    constexpr size_t SYS_ACCESS     = 21;
-    constexpr size_t SYS_DUP        = 32;
-    constexpr size_t SYS_DUP2       = 33;
-    constexpr size_t SYS_GETPID     = 39;
-    constexpr size_t SYS_FORK       = 57;
-    constexpr size_t SYS_EXECVE     = 59;
-    constexpr size_t SYS_EXIT       = 60;
-    constexpr size_t SYS_WAIT4      = 61;
-    constexpr size_t SYS_UNAME      = 63;
-    constexpr size_t SYS_FCNTL      = 72;
-    constexpr size_t SYS_GETCWD     = 79;
-    constexpr size_t SYS_CHDIR      = 80;
-    constexpr size_t SYS_FCHDIR     = 81;
-    constexpr size_t SYS_MKDIR      = 83;
-    constexpr size_t SYS_CREAT      = 85;
-    constexpr size_t SYS_GETUID     = 102;
-    constexpr size_t SYS_GETGID     = 104;
-    constexpr size_t SYS_GETEUID    = 107;
-    constexpr size_t SYS_GETEGID    = 108;
-    constexpr size_t SYS_SETPGID    = 109;
-    constexpr size_t SYS_GETPPID    = 110;
-    constexpr size_t SYS_SETSID     = 112;
-    constexpr size_t SYS_GETPGID    = 121;
-    constexpr size_t SYS_GETSID     = 124;
-    constexpr size_t SYS_ARCH_PRCTL = 158;
-    constexpr size_t SYS_GETDENTS64 = 217;
-    constexpr size_t SYS_PANIC      = 255;
-    constexpr size_t SYS_OPENAT     = 257;
-    constexpr size_t SYS_FSTATAT    = 262;
+constexpr size_t SYS_READ       = 0;
+constexpr size_t SYS_WRITE      = 1;
+constexpr size_t SYS_OPEN       = 2;
+constexpr size_t SYS_CLOSE      = 3;
+constexpr size_t SYS_STAT       = 4;
+constexpr size_t SYS_FSTAT      = 5;
+constexpr size_t SYS_LSTAT      = 6;
+constexpr size_t SYS_LSEEK      = 8;
+constexpr size_t SYS_MMAP       = 9;
+constexpr size_t SYS_IOCTL      = 16;
+constexpr size_t SYS_ACCESS     = 21;
+constexpr size_t SYS_DUP        = 32;
+constexpr size_t SYS_DUP2       = 33;
+constexpr size_t SYS_GETPID     = 39;
+constexpr size_t SYS_FORK       = 57;
+constexpr size_t SYS_EXECVE     = 59;
+constexpr size_t SYS_EXIT       = 60;
+constexpr size_t SYS_WAIT4      = 61;
+constexpr size_t SYS_UNAME      = 63;
+constexpr size_t SYS_FCNTL      = 72;
+constexpr size_t SYS_GETCWD     = 79;
+constexpr size_t SYS_CHDIR      = 80;
+constexpr size_t SYS_FCHDIR     = 81;
+constexpr size_t SYS_MKDIR      = 83;
+constexpr size_t SYS_CREAT      = 85;
+constexpr size_t SYS_GETUID     = 102;
+constexpr size_t SYS_GETGID     = 104;
+constexpr size_t SYS_GETEUID    = 107;
+constexpr size_t SYS_GETEGID    = 108;
+constexpr size_t SYS_SETPGID    = 109;
+constexpr size_t SYS_GETPPID    = 110;
+constexpr size_t SYS_SETSID     = 112;
+constexpr size_t SYS_GETPGID    = 121;
+constexpr size_t SYS_GETSID     = 124;
+constexpr size_t SYS_ARCH_PRCTL = 158;
+constexpr size_t SYS_REBOOT     = 169;
+constexpr size_t SYS_GETDENTS64 = 217;
+constexpr size_t SYS_PANIC      = 255;
+constexpr size_t SYS_OPENAT     = 257;
+constexpr size_t SYS_FSTATAT    = 262;
 
 #pragma endregion
 
-    static inline uintptr_t SyscallAsm0(uintptr_t n)
-    {
-
-        uintptr_t ret;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
-
-    static inline uintptr_t SyscallAsm1(uintptr_t n, uintptr_t a1)
-    {
-        uintptr_t ret;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n), "D"(a1)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
-
-    static inline uintptr_t SyscallAsm2(uintptr_t n, uintptr_t a1, uintptr_t a2)
-    {
-        uintptr_t ret;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n), "D"(a1), "S"(a2)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
-
-    static inline uintptr_t SyscallAsm3(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                        uintptr_t a3)
-    {
-        uintptr_t ret;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n), "D"(a1), "S"(a2), "d"(a3)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
-
-    static inline uintptr_t SyscallAsm4(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                        uintptr_t a3, uintptr_t a4)
-    {
-        uintptr_t          ret;
-        register uintptr_t r10 asm("r10") = a4;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
+static inline uintptr_t SyscallAsm0(uintptr_t n)
+{
 
-    static inline uintptr_t SyscallAsm5(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                        uintptr_t a3, uintptr_t a4,
-                                        uintptr_t a5)
-    {
-        uintptr_t          ret;
-        register uintptr_t r10 asm("r10") = a4;
-        register uintptr_t r8 asm("r8")   = a5;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
+    uintptr_t ret;
+    asm volatile(SyscallInvoker : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
+    return ret;
+}
 
-    static inline uintptr_t SyscallAsm6(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                                        uintptr_t a3, uintptr_t a4,
-                                        uintptr_t a5, uintptr_t a6)
-    {
-        uintptr_t          ret;
-        register uintptr_t r10 asm("r10") = a4;
-        register uintptr_t r8 asm("r8")   = a5;
-        register uintptr_t r9 asm("r9")   = a6;
-        asm volatile(SyscallInvoker
-                     : "=a"(ret)
-                     : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8),
-                       "r"(r9)
-                     : "rcx", "r11", "memory");
-        return ret;
-    }
+static inline uintptr_t SyscallAsm1(uintptr_t n, uintptr_t a1)
+{
+    uintptr_t ret;
+    asm volatile(SyscallInvoker
+                 : "=a"(ret)
+                 : "a"(n), "D"(a1)
+                 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static inline uintptr_t SyscallAsm2(uintptr_t n, uintptr_t a1, uintptr_t a2)
+{
+    uintptr_t ret;
+    asm volatile(SyscallInvoker
+                 : "=a"(ret)
+                 : "a"(n), "D"(a1), "S"(a2)
+                 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static inline uintptr_t SyscallAsm3(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                    uintptr_t a3)
+{
+    uintptr_t ret;
+    asm volatile(SyscallInvoker
+                 : "=a"(ret)
+                 : "a"(n), "D"(a1), "S"(a2), "d"(a3)
+                 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static inline uintptr_t SyscallAsm4(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                    uintptr_t a3, uintptr_t a4)
+{
+    uintptr_t          ret;
+    register uintptr_t r10 asm("r10") = a4;
+    asm volatile(SyscallInvoker
+                 : "=a"(ret)
+                 : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10)
+                 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static inline uintptr_t SyscallAsm5(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                    uintptr_t a3, uintptr_t a4, uintptr_t a5)
+{
+    uintptr_t          ret;
+    register uintptr_t r10 asm("r10") = a4;
+    register uintptr_t r8 asm("r8")   = a5;
+    asm volatile(SyscallInvoker
+                 : "=a"(ret)
+                 : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8)
+                 : "rcx", "r11", "memory");
+    return ret;
+}
+
+static inline uintptr_t SyscallAsm6(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                                    uintptr_t a3, uintptr_t a4, uintptr_t a5,
+                                    uintptr_t a6)
+{
+    uintptr_t          ret;
+    register uintptr_t r10 asm("r10") = a4;
+    register uintptr_t r8 asm("r8")   = a5;
+    register uintptr_t r9 asm("r9")   = a6;
+    asm volatile(SyscallInvoker
+                 : "=a"(ret)
+                 : "a"(n), "D"(a1), "S"(a2), "d"(a3), "r"(r10), "r"(r8), "r"(r9)
+                 : "rcx", "r11", "memory");
+    return ret;
+}
 
 #define GetMacro(_1, _2, _3, _4, _5, _6, _7, NAME, ...) NAME
 #define InvokeSyscall(...)                                                     \
     GetMacro(__VA_ARGS__, SyscallAsm6, SyscallAsm5, SyscallAsm4, SyscallAsm3,  \
              SyscallAsm2, SyscallAsm1, SyscallAsm0)(__VA_ARGS__)
 
-    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                               uintptr_t a3, uintptr_t a4, uintptr_t a5,
-                               uintptr_t a6)
-    {
-        return InvokeSyscall(n, a1, a2, a3, a4, a5, a6);
-    }
-    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                               uintptr_t a3, uintptr_t a4, uintptr_t a5)
-    {
-        return InvokeSyscall(n, a1, a2, a3, a4, a5);
-    }
-    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                               uintptr_t a3, uintptr_t a4)
-    {
-        return InvokeSyscall(n, a1, a2, a3, a4);
-    }
-    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
-                               uintptr_t a3)
-    {
-        return InvokeSyscall(n, a1, a2, a3);
-    }
-    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2)
-    {
-        return InvokeSyscall(n, a1, a2);
-    }
-    inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1)
-    {
-        return InvokeSyscall(n, a1);
-    }
-    inline uintptr_t DoSyscall(uintptr_t n) { return InvokeSyscall(n); }
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                           uintptr_t a3, uintptr_t a4, uintptr_t a5,
+                           uintptr_t a6)
+{
+    return InvokeSyscall(n, a1, a2, a3, a4, a5, a6);
+}
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                           uintptr_t a3, uintptr_t a4, uintptr_t a5)
+{
+    return InvokeSyscall(n, a1, a2, a3, a4, a5);
+}
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                           uintptr_t a3, uintptr_t a4)
+{
+    return InvokeSyscall(n, a1, a2, a3, a4);
+}
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2,
+                           uintptr_t a3)
+{
+    return InvokeSyscall(n, a1, a2, a3);
+}
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1, uintptr_t a2)
+{
+    return InvokeSyscall(n, a1, a2);
+}
+inline uintptr_t DoSyscall(uintptr_t n, uintptr_t a1)
+{
+    return InvokeSyscall(n, a1);
+}
+inline uintptr_t DoSyscall(uintptr_t n) { return InvokeSyscall(n); }
 
-    template <typename... Args>
-    inline uintptr_t Syscall(Args&&... args)
-    {
-        return DoSyscall(uintptr_t(args)...);
-    }
-} // namespace mlibc
+template <typename... Args>
+inline uintptr_t Syscall(Args&&... args)
+{
+    return DoSyscall(uintptr_t(args)...);
+}
diff --git a/sysdeps/cryptix/meson.build b/sysdeps/cryptix/meson.build
index 954b0bdb..82db7eac 100644
--- a/sysdeps/cryptix/meson.build
+++ b/sysdeps/cryptix/meson.build
@@ -4,6 +4,7 @@ libc_sources += files(
 
   'generic/mntent.cpp',
   'generic/mount.cpp',
+  'generic/reboot.cpp',
 
   'sysdeps/vfs.cpp',
   'sysdeps/internal.cpp',
-- 
2.48.1

